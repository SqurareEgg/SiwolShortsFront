<?xml version="1.0" encoding="UTF-8"?>
<documents>
<document index="1">
<source>App.css</source>
<document_content>
</document_content>
</document>
<document index="1">
<source>App.js</source>
<document_content>
import React, { useEffect } from &apos;react&apos;;
import { BrowserRouter, Routes, Route, Navigate } from &apos;react-router-dom&apos;;
import { RecoilRoot, useRecoilState } from &apos;recoil&apos;;
import { userState, loginModalState } from &apos;./recoil/atoms&apos;;
import MainLayout from &apos;./components/layout/MainLayout&apos;;
import { PostsPage } from &apos;./components/PostsPage&apos;;
import { ChatPage } from &apos;./components/ChatPage&apos;;
import { MemesPage } from &apos;./components/MemesPage&apos;;
import { SettingsPage } from &apos;./components/SettingsPage&apos;;
import LoginModal from &apos;./components/LoginModal&apos;;

function AppContent() {
  const [user, setUser] = useRecoilState(userState);
  const [, setLoginModalOpen] = useRecoilState(loginModalState);

  useEffect(() =&gt; {
    // 페이지 로드시 localStorage에서 사용자 정보 복원
    const token = localStorage.getItem(&apos;token&apos;);
    const storedUser = localStorage.getItem(&apos;user&apos;);

    if (token &amp;&amp; storedUser &amp;&amp; !user) {
      try {
        const parsedUser = JSON.parse(storedUser);
        setUser(parsedUser);

        // API 클라이언트에 토큰 설정
        import(&apos;./api/client&apos;).then(({ api }) =&gt; {
          api.defaults.headers.common[&apos;Authorization&apos;] = `Bearer ${token}`;
        });
      } catch (error) {
        console.error(&apos;Failed to restore user session:&apos;, error);
        localStorage.removeItem(&apos;token&apos;);
        localStorage.removeItem(&apos;user&apos;);
      }
    }
  }, [user, setUser]);

  // 토큰 만료 체크 및 자동 갱신
  useEffect(() =&gt; {
    if (user) {
      const checkTokenExpiry = async () =&gt; {
        try {
          const response = await fetch(&apos;/api/auth/verify&apos;, {
            headers: {
              &apos;Authorization&apos;: `Bearer ${localStorage.getItem(&apos;token&apos;)}`
            }
          });

          if (!response.ok) {
            throw new Error(&apos;Token expired&apos;);
          }
        } catch (error) {
          console.error(&apos;Token verification failed:&apos;, error);
          setUser(null);
          localStorage.removeItem(&apos;token&apos;);
          localStorage.removeItem(&apos;user&apos;);
          setLoginModalOpen(true);
        }
      };

      // 주기적으로 토큰 확인 (5분마다)
      const interval = setInterval(checkTokenExpiry, 5 * 60 * 1000);
      return () =&gt; clearInterval(interval);
    }
  }, [user, setUser, setLoginModalOpen]);

  return (
    &lt;Routes&gt;
      &lt;Route path=&quot;/&quot; element={&lt;MainLayout /&gt;}&gt;
        &lt;Route index element={&lt;PostsPage /&gt;} /&gt;
        &lt;Route
          path=&quot;chat/:chatId&quot;
          element={
            user ? &lt;ChatPage /&gt; : &lt;Navigate to=&quot;/&quot; replace state={{ needLogin: true }} /&gt;
          }
        /&gt;
        &lt;Route path=&quot;memes&quot; element={&lt;MemesPage /&gt;} /&gt;
        &lt;Route path=&quot;settings&quot; element={&lt;SettingsPage /&gt;} /&gt;
      &lt;/Route&gt;
      &lt;Route
        path=&quot;*&quot;
        element={&lt;Navigate to=&quot;/&quot; replace /&gt;}
      /&gt;
    &lt;/Routes&gt;
  );
}

function App() {
  return (
    &lt;RecoilRoot&gt;
      &lt;BrowserRouter&gt;
        &lt;AppContent /&gt;
        &lt;LoginModal /&gt;
      &lt;/BrowserRouter&gt;
    &lt;/RecoilRoot&gt;
  );
}

export default App;
</document_content>
</document>
<document index="1">
<source>App.test.js</source>
<document_content>
import { render, screen } from &apos;@testing-library/react&apos;;
import App from &apos;./App&apos;;

test(&apos;renders learn react link&apos;, () =&gt; {
  render(&lt;App /&gt;);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

</document_content>
</document>
<document index="1">
<source>index.css</source>
<document_content>
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, &apos;Segoe UI&apos;, &apos;Roboto&apos;, &apos;Oxygen&apos;,
    &apos;Ubuntu&apos;, &apos;Cantarell&apos;, &apos;Fira Sans&apos;, &apos;Droid Sans&apos;, &apos;Helvetica Neue&apos;,
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, &apos;Courier New&apos;,
    monospace;
}
@tailwind base;
@tailwind components;
@tailwind utilities;
</document_content>
</document>
<document index="1">
<source>index.js</source>
<document_content>
import React from &apos;react&apos;;
import ReactDOM from &apos;react-dom/client&apos;;
import &apos;./index.css&apos;;
import App from &apos;./App&apos;;
import reportWebVitals from &apos;./reportWebVitals&apos;;
// import { api } from &apos;./api/client&apos;;
//
// 앱 시작시 자동 로그인
// const autoLogin = async () =&gt; {
//   try {
//     const formData = new URLSearchParams();
//     formData.append(&apos;username&apos;, &apos;123@123.com&apos;);
//     formData.append(&apos;password&apos;, &apos;123123&apos;);
//
//     const response = await api.post(&apos;/auth/login&apos;, formData, {
//       headers: {
//         &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;
//       }
//     });
//
//     if (response.data.access_token) {
//       localStorage.setItem(&apos;token&apos;, response.data.access_token);
//       localStorage.setItem(&apos;user&apos;, JSON.stringify(response.data.user));
//       console.log(&apos;Auto login successful&apos;);
//     }
//   } catch (error) {
//     console.error(&apos;Auto login failed:&apos;, error);
//   }
// };
//
// // 앱 시작시 자동 로그인 실행
// autoLogin();

const root = ReactDOM.createRoot(document.getElementById(&apos;root&apos;));
root.render(
  &lt;React.StrictMode&gt;
    &lt;App /&gt;
  &lt;/React.StrictMode&gt;
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

</document_content>
</document>
<document index="1">
<source>logo.svg</source>
<document_content>
&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewBox=&quot;0 0 841.9 595.3&quot;&gt;&lt;g fill=&quot;#61DAFB&quot;&gt;&lt;path d=&quot;M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z&quot;/&gt;&lt;circle cx=&quot;420.9&quot; cy=&quot;296.5&quot; r=&quot;45.7&quot;/&gt;&lt;path d=&quot;M520.5 78.1z&quot;/&gt;&lt;/g&gt;&lt;/svg&gt;
</document_content>
</document>
<document index="1">
<source>project_files.xml</source>
<document_content>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;documents&gt;
&lt;document index=&quot;1&quot;&gt;
&lt;source&gt;App.css&lt;/source&gt;
&lt;document_content&gt;
&lt;/document_content&gt;
&lt;/document&gt;
&lt;document index=&quot;1&quot;&gt;
&lt;source&gt;App.js&lt;/source&gt;
&lt;document_content&gt;
import React, { useEffect } from &amp;apos;react&amp;apos;;
import { BrowserRouter, Routes, Route, Navigate } from &amp;apos;react-router-dom&amp;apos;;
import { RecoilRoot, useRecoilState } from &amp;apos;recoil&amp;apos;;
import { userState, loginModalState } from &amp;apos;./recoil/atoms&amp;apos;;
import MainLayout from &amp;apos;./components/layout/MainLayout&amp;apos;;
import { PostsPage } from &amp;apos;./components/PostsPage&amp;apos;;
import { ChatPage } from &amp;apos;./components/ChatPage&amp;apos;;
import { MemesPage } from &amp;apos;./components/MemesPage&amp;apos;;
import { SettingsPage } from &amp;apos;./components/SettingsPage&amp;apos;;
import LoginModal from &amp;apos;./components/LoginModal&amp;apos;;

function AppContent() {
  const [user, setUser] = useRecoilState(userState);
  const [, setLoginModalOpen] = useRecoilState(loginModalState);

  useEffect(() =&amp;gt; {
    // 페이지 로드시 localStorage에서 사용자 정보 복원
    const token = localStorage.getItem(&amp;apos;token&amp;apos;);
    const storedUser = localStorage.getItem(&amp;apos;user&amp;apos;);

    if (token &amp;amp;&amp;amp; storedUser &amp;amp;&amp;amp; !user) {
      try {
        const parsedUser = JSON.parse(storedUser);
        setUser(parsedUser);

        // API 클라이언트에 토큰 설정
        import(&amp;apos;./api/client&amp;apos;).then(({ api }) =&amp;gt; {
          api.defaults.headers.common[&amp;apos;Authorization&amp;apos;] = `Bearer ${token}`;
        });
      } catch (error) {
        console.error(&amp;apos;Failed to restore user session:&amp;apos;, error);
        localStorage.removeItem(&amp;apos;token&amp;apos;);
        localStorage.removeItem(&amp;apos;user&amp;apos;);
      }
    }
  }, [user, setUser]);

  // 토큰 만료 체크 및 자동 갱신
  useEffect(() =&amp;gt; {
    if (user) {
      const checkTokenExpiry = async () =&amp;gt; {
        try {
          const response = await fetch(&amp;apos;/api/auth/verify&amp;apos;, {
            headers: {
              &amp;apos;Authorization&amp;apos;: `Bearer ${localStorage.getItem(&amp;apos;token&amp;apos;)}`
            }
          });

          if (!response.ok) {
            throw new Error(&amp;apos;Token expired&amp;apos;);
          }
        } catch (error) {
          console.error(&amp;apos;Token verification failed:&amp;apos;, error);
          setUser(null);
          localStorage.removeItem(&amp;apos;token&amp;apos;);
          localStorage.removeItem(&amp;apos;user&amp;apos;);
          setLoginModalOpen(true);
        }
      };

      // 주기적으로 토큰 확인 (5분마다)
      const interval = setInterval(checkTokenExpiry, 5 * 60 * 1000);
      return () =&amp;gt; clearInterval(interval);
    }
  }, [user, setUser, setLoginModalOpen]);

  return (
    &amp;lt;Routes&amp;gt;
      &amp;lt;Route path=&amp;quot;/&amp;quot; element={&amp;lt;MainLayout /&amp;gt;}&amp;gt;
        &amp;lt;Route index element={&amp;lt;PostsPage /&amp;gt;} /&amp;gt;
        &amp;lt;Route
          path=&amp;quot;chat/:chatId&amp;quot;
          element={
            user ? &amp;lt;ChatPage /&amp;gt; : &amp;lt;Navigate to=&amp;quot;/&amp;quot; replace state={{ needLogin: true }} /&amp;gt;
          }
        /&amp;gt;
        &amp;lt;Route path=&amp;quot;memes&amp;quot; element={&amp;lt;MemesPage /&amp;gt;} /&amp;gt;
        &amp;lt;Route path=&amp;quot;settings&amp;quot; element={&amp;lt;SettingsPage /&amp;gt;} /&amp;gt;
      &amp;lt;/Route&amp;gt;
      &amp;lt;Route
        path=&amp;quot;*&amp;quot;
        element={&amp;lt;Navigate to=&amp;quot;/&amp;quot; replace /&amp;gt;}
      /&amp;gt;
    &amp;lt;/Routes&amp;gt;
  );
}

function App() {
  return (
    &amp;lt;RecoilRoot&amp;gt;
      &amp;lt;BrowserRouter&amp;gt;
        &amp;lt;AppContent /&amp;gt;
        &amp;lt;LoginModal /&amp;gt;
      &amp;lt;/BrowserRouter&amp;gt;
    &amp;lt;/RecoilRoot&amp;gt;
  );
}

export default App;
&lt;/document_content&gt;
&lt;/document&gt;
&lt;document index=&quot;1&quot;&gt;
&lt;source&gt;App.test.js&lt;/source&gt;
&lt;document_content&gt;
import { render, screen } from &amp;apos;@testing-library/react&amp;apos;;
import App from &amp;apos;./App&amp;apos;;

test(&amp;apos;renders learn react link&amp;apos;, () =&amp;gt; {
  render(&amp;lt;App /&amp;gt;);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

&lt;/document_content&gt;
&lt;/document&gt;
&lt;document index=&quot;1&quot;&gt;
&lt;source&gt;index.css&lt;/source&gt;
&lt;document_content&gt;
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, &amp;apos;Segoe UI&amp;apos;, &amp;apos;Roboto&amp;apos;, &amp;apos;Oxygen&amp;apos;,
    &amp;apos;Ubuntu&amp;apos;, &amp;apos;Cantarell&amp;apos;, &amp;apos;Fira Sans&amp;apos;, &amp;apos;Droid Sans&amp;apos;, &amp;apos;Helvetica Neue&amp;apos;,
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, &amp;apos;Courier New&amp;apos;,
    monospace;
}
@tailwind base;
@tailwind components;
@tailwind utilities;
&lt;/document_content&gt;
&lt;/document&gt;
&lt;document index=&quot;1&quot;&gt;
&lt;source&gt;index.js&lt;/source&gt;
&lt;document_content&gt;
import React from &amp;apos;react&amp;apos;;
import ReactDOM from &amp;apos;react-dom/client&amp;apos;;
import &amp;apos;./index.css&amp;apos;;
import App from &amp;apos;./App&amp;apos;;
import reportWebVitals from &amp;apos;./reportWebVitals&amp;apos;;
// import { api } from &amp;apos;./api/client&amp;apos;;
//
// 앱 시작시 자동 로그인
// const autoLogin = async () =&amp;gt; {
//   try {
//     const formData = new URLSearchParams();
//     formData.append(&amp;apos;username&amp;apos;, &amp;apos;123@123.com&amp;apos;);
//     formData.append(&amp;apos;password&amp;apos;, &amp;apos;123123&amp;apos;);
//
//     const response = await api.post(&amp;apos;/auth/login&amp;apos;, formData, {
//       headers: {
//         &amp;apos;Content-Type&amp;apos;: &amp;apos;application/x-www-form-urlencoded&amp;apos;
//       }
//     });
//
//     if (response.data.access_token) {
//       localStorage.setItem(&amp;apos;token&amp;apos;, response.data.access_token);
//       localStorage.setItem(&amp;apos;user&amp;apos;, JSON.stringify(response.data.user));
//       console.log(&amp;apos;Auto login successful&amp;apos;);
//     }
//   } catch (error) {
//     console.error(&amp;apos;Auto login failed:&amp;apos;, error);
//   }
// };
//
// // 앱 시작시 자동 로그인 실행
// autoLogin();

const root = ReactDOM.createRoot(document.getElementById(&amp;apos;root&amp;apos;));
root.render(
  &amp;lt;React.StrictMode&amp;gt;
    &amp;lt;App /&amp;gt;
  &amp;lt;/React.StrictMode&amp;gt;
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

&lt;/document_content&gt;
&lt;/document&gt;
&lt;document index=&quot;1&quot;&gt;
&lt;source&gt;logo.svg&lt;/source&gt;
&lt;document_content&gt;
&amp;lt;svg xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot; viewBox=&amp;quot;0 0 841.9 595.3&amp;quot;&amp;gt;&amp;lt;g fill=&amp;quot;#61DAFB&amp;quot;&amp;gt;&amp;lt;path d=&amp;quot;M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z&amp;quot;/&amp;gt;&amp;lt;circle cx=&amp;quot;420.9&amp;quot; cy=&amp;quot;296.5&amp;quot; r=&amp;quot;45.7&amp;quot;/&amp;gt;&amp;lt;path d=&amp;quot;M520.5 78.1z&amp;quot;/&amp;gt;&amp;lt;/g&amp;gt;&amp;lt;/svg&amp;gt;
&lt;/document_content&gt;
&lt;/document&gt;
&lt;document index=&quot;1&quot;&gt;
&lt;source&gt;project_files.xml&lt;/source&gt;
&lt;document_content&gt;

</document_content>
</document>
<document index="1">
<source>reportWebVitals.js</source>
<document_content>
const reportWebVitals = onPerfEntry =&gt; {
  if (onPerfEntry &amp;&amp; onPerfEntry instanceof Function) {
    import(&apos;web-vitals&apos;).then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) =&gt; {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

</document_content>
</document>
<document index="1">
<source>setupTests.js</source>
<document_content>
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import &apos;@testing-library/jest-dom&apos;;

</document_content>
</document>
<document index="1">
<source>api\auth.js</source>
<document_content>
import { api } from &apos;./client&apos;;

export const authApi = {
    login: async (email, password) =&gt; {
        try {
            const formData = new URLSearchParams();
            formData.append(&apos;username&apos;, email);
            formData.append(&apos;password&apos;, password);

            const response = await api.post(&apos;/auth/login&apos;, formData, {
                headers: {
                    &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;
                }
            });

            if (response.data.access_token) {
                localStorage.setItem(&apos;token&apos;, response.data.access_token);
                api.defaults.headers.common[&apos;Authorization&apos;] = `Bearer ${response.data.access_token}`;
                localStorage.setItem(&apos;user&apos;, JSON.stringify(response.data.user));
            }

            return response.data;
        } catch (error) {
            console.error(&apos;Login error:&apos;, error.response?.data);
            throw error;
        }
    },

    register: async ({ email, password, username }) =&gt; {
    try {
        // form-urlencoded 대신 JSON 형식으로 전송
        const response = await api.post(&apos;/auth/register&apos;, {
            email,
            password,
            username
        }, {
            headers: {
                &apos;Content-Type&apos;: &apos;application/json&apos;  // JSON 형식 명시
            }
        });
        return response.data;
    } catch (error) {
        // 422 에러의 경우 validation 에러 메시지 처리
        if (error.response?.status === 422) {
            const validationErrors = error.response.data.detail;
            // validation 에러 메시지를 읽기 쉽게 변환
            const errorMessage = Array.isArray(validationErrors)
                ? validationErrors.map(err =&gt; err.msg).join(&apos;\n&apos;)
                : &apos;입력 정보를 확인해주세요.&apos;;
            throw new Error(errorMessage);
        }
        console.error(&apos;Register error:&apos;, error.response?.data);
        throw error;
    }
},

    getCurrentUser: async () =&gt; {
        try {
            const response = await api.get(&apos;/auth/me&apos;);
            return response.data;
        } catch (error) {
            console.error(&apos;Get user error:&apos;, error.response?.data);
            return null;
        }
    },

    logout: () =&gt; {
        localStorage.removeItem(&apos;token&apos;);
        localStorage.removeItem(&apos;user&apos;);
        delete api.defaults.headers.common[&apos;Authorization&apos;];
    }
};
</document_content>
</document>
<document index="1">
<source>api\client.js</source>
<document_content>
import axios from &apos;axios&apos;;

const api = axios.create({
    baseURL: process.env.REACT_APP_API_URL || &quot;http://localhost:8000/api&quot;,
    timeout: 300000,
});

// 요청 인터셉터
api.interceptors.request.use((config) =&gt; {
    const token = localStorage.getItem(&apos;token&apos;);
    if (token) {
        config.headers.Authorization = `Bearer ${token}`;
    }
    // URL 중복 방지
    if (config.url.startsWith(&apos;/api/&apos;)) {
        config.url = config.url.substring(4);
    }
    return config;
});

// 응답 인터셉터
api.interceptors.response.use(
    (response) =&gt; response,
    (error) =&gt; {
        if (error.response?.status === 401) {
            localStorage.removeItem(&apos;token&apos;);
            localStorage.removeItem(&apos;user&apos;);
        }
        return Promise.reject(error);
    }
);

export { api };
</document_content>
</document>
<document index="1">
<source>components\AuthForm.js</source>
<document_content>
import React from &apos;react&apos;;
import Input from &apos;./common/Input&apos;;
import Button from &apos;./common/Button&apos;;

const AuthForm = ({
  type = &apos;login&apos;,
  loading,
  error,
  formData,
  onSubmit,
  onChange,
  onToggleType
}) =&gt; {
  const isRegister = type === &apos;register&apos;;

  return (
    &lt;form onSubmit={onSubmit} className=&quot;space-y-4&quot;&gt;
      {error &amp;&amp; (
        &lt;div className=&quot;bg-red-500/10 text-red-400 p-3 rounded-lg&quot;&gt;
          &lt;p className=&quot;text-sm&quot;&gt;{error}&lt;/p&gt;
        &lt;/div&gt;
      )}

      &lt;Input
        label=&quot;이메일&quot;
        type=&quot;email&quot;
        name=&quot;email&quot;
        value={formData.email}
        onChange={onChange}
        required
      /&gt;

      {isRegister &amp;&amp; (
        &lt;Input
          label=&quot;사용자명&quot;
          name=&quot;username&quot;
          value={formData.username}
          onChange={onChange}
          required
        /&gt;
      )}

      &lt;Input
        label=&quot;비밀번호&quot;
        type=&quot;password&quot;
        name=&quot;password&quot;
        value={formData.password}
        onChange={onChange}
        required
      /&gt;

      &lt;Button
        type=&quot;submit&quot;
        variant=&quot;primary&quot;
        fullWidth
        isLoading={loading}
      &gt;
        {isRegister ? &apos;가입하기&apos; : &apos;로그인&apos;}
      &lt;/Button&gt;

      &lt;Button
        type=&quot;button&quot;
        variant=&quot;outline&quot;
        fullWidth
        onClick={onToggleType}
      &gt;
        {isRegister
          ? &apos;이미 계정이 있으신가요? 로그인&apos;
          : &apos;계정이 없으신가요? 회원가입&apos;}
      &lt;/Button&gt;
    &lt;/form&gt;
  );
};

export default AuthForm;
</document_content>
</document>
<document index="1">
<source>components\ChatHistory.js</source>
<document_content>
import React, { useState, useEffect } from &apos;react&apos;;
import { useRecoilState } from &apos;recoil&apos;;
import { MessageSquare, Plus, Bot, User, ChevronLeft } from &apos;lucide-react&apos;;
import { chatListState, currentChatState } from &apos;../recoil/atoms&apos;;
import { api } from &apos;../api/client&apos;;
import { Link, useNavigate } from &apos;react-router-dom&apos;;

export const ChatHistory = () =&gt; {
  const [chatList, setChatList] = useRecoilState(chatListState);
  const [currentChat, setCurrentChat] = useRecoilState(currentChatState);
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();

  useEffect(() =&gt; {
    const fetchChatList = async () =&gt; {
      setLoading(true);
      try {
        const response = await api.get(&apos;/chats&apos;);
        setChatList(response.data);
      } catch (err) {
        console.error(&apos;Failed to fetch chat list:&apos;, err);
      } finally {
        setLoading(false);
      }
    };

    fetchChatList();
  }, []);

  const createNewChat = () =&gt; {
    const newChat = {
      id: Date.now().toString(),
      title: &apos;New Chat&apos;,
      messages: []
    };
    setChatList(prev =&gt; [newChat, ...prev]);
    setCurrentChat(newChat.id);
    navigate(`/chat/${newChat.id}`);
  };

  return (
    &lt;div className=&quot;bg-gray-900 text-white h-full flex flex-col&quot;&gt;
      {/* 헤더 */}
      &lt;div className=&quot;p-4 border-b border-gray-700 flex items-center&quot;&gt;
        &lt;button
          onClick={() =&gt; navigate(-1)}
          className=&quot;p-2 hover:bg-gray-700 rounded-lg mr-2&quot;
        &gt;
          &lt;ChevronLeft size={20} /&gt;
        &lt;/button&gt;
        &lt;h2 className=&quot;text-lg font-semibold&quot;&gt;채팅 목록&lt;/h2&gt;
      &lt;/div&gt;

      {/* 새 채팅 버튼 */}
      &lt;div className=&quot;p-4&quot;&gt;
        &lt;button
          onClick={createNewChat}
          className=&quot;w-full flex items-center justify-center gap-2 py-3 bg-blue-600 hover:bg-blue-700 rounded-lg transition-colors&quot;
        &gt;
          &lt;Plus size={20} /&gt;
          &lt;span&gt;새 채팅&lt;/span&gt;
        &lt;/button&gt;
      &lt;/div&gt;

      {/* 채팅 목록 */}
      &lt;div className=&quot;flex-1 overflow-y-auto&quot;&gt;
        {loading ? (
          &lt;div className=&quot;flex justify-center py-8&quot;&gt;
            &lt;div className=&quot;animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500&quot; /&gt;
          &lt;/div&gt;
        ) : (
          &lt;div className=&quot;space-y-1 p-2&quot;&gt;
            {chatList.map((chat) =&gt; (
              &lt;Link
                key={chat.id}
                to={`/chat/${chat.id}`}
                className={`flex items-center p-3 rounded-lg cursor-pointer transition-colors ${
                  currentChat === chat.id
                    ? &apos;bg-gray-700 text-white&apos;
                    : &apos;hover:bg-gray-800 text-gray-300&apos;
                }`}
              &gt;
                &lt;MessageSquare size={18} className=&quot;mr-3&quot; /&gt;
                &lt;span className=&quot;text-sm truncate&quot;&gt;{chat.title}&lt;/span&gt;
              &lt;/Link&gt;
            ))}
          &lt;/div&gt;
        )}
      &lt;/div&gt;
    &lt;/div&gt;
  );
};

// 채팅 메시지 컴포넌트
export const ChatMessages = ({ chatId }) =&gt; {
  const [chatList, setChatList] = useRecoilState(chatListState);

  useEffect(() =&gt; {
    const fetchChatMessages = async () =&gt; {
      if (chatId) {
        try {
          const response = await api.get(`/chat/${chatId}/messages`);
          if (response.data.success) {
            setChatList(response.data.messages);
          }
        } catch (err) {
          console.error(&apos;Failed to fetch chat messages:&apos;, err);
        }
      }
    };

    fetchChatMessages();
  }, [chatId, setChatList]);

  return (
    &lt;div className=&quot;flex flex-col space-y-4 p-4&quot;&gt;
      {chatList.map((message, index) =&gt; (
        &lt;div key={index} className={`flex ${message.type === &apos;user&apos; ? &apos;justify-end&apos; : &apos;justify-start&apos;}`}&gt;
          &lt;div className={`max-w-[80%] rounded-lg p-3 ${
            message.type === &apos;user&apos; 
              ? &apos;bg-blue-600 text-white&apos; 
              : &apos;bg-gray-700 text-white&apos;
          }`}&gt;
            &lt;p className=&quot;text-sm&quot;&gt;{message.content}&lt;/p&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      ))}
    &lt;/div&gt;
  );
};
</document_content>
</document>
<document index="1">
<source>components\ChatPage.js</source>
<document_content>
import React, { useState, useEffect } from &apos;react&apos;;
import { useParams } from &apos;react-router-dom&apos;;
import { useRecoilState } from &apos;recoil&apos;;
import { Send, Wand2, Search } from &apos;lucide-react&apos;;
import { chatListState, currentChatState } from &apos;../recoil/atoms&apos;;
import { api } from &apos;../api/client&apos;;

const isValidImageUrl = async (url) =&gt; {
  try {
    const response = await fetch(url, { method: &apos;HEAD&apos; });
    const contentType = response.headers.get(&apos;content-type&apos;);
    return contentType?.startsWith(&apos;image/&apos;);
  } catch {
    return false;
  }
};

const ChatMessage = ({ scene }) =&gt; {
  const [isExpanded, setIsExpanded] = useState(false);
  const [validImages, setValidImages] = useState([]);

  useEffect(() =&gt; {
    const validateImages = async () =&gt; {
      if (scene.images &amp;&amp; scene.images.length &gt; 0) {
        const validatedImages = await Promise.all(
          scene.images.map(async (image) =&gt; {
            const isValid = await isValidImageUrl(image.url);
            return isValid ? image : null;
          })
        );
        setValidImages(validatedImages.filter(img =&gt; img !== null));
      }
    };

    validateImages();
  }, [scene.images]);

  return (
    &lt;div className=&quot;bg-gray-900 rounded-lg p-4 mb-3&quot;&gt;
      &lt;div className=&quot;flex flex-col gap-2&quot;&gt;
        &lt;div className=&quot;text-gray-300&quot;&gt;
          &lt;strong&gt;{scene.scene_number}. [{scene.search_tags[0]}]&lt;/strong&gt;
          &lt;p className=&quot;whitespace-pre-wrap&quot;&gt;{scene.narration}&lt;/p&gt;
        &lt;/div&gt;

        {validImages.length &gt; 0 &amp;&amp; (
          &lt;&gt;
            &lt;button
              onClick={() =&gt; setIsExpanded(!isExpanded)}
              className=&quot;text-blue-500 hover:text-blue-400 text-sm&quot;
            &gt;
              {isExpanded ? &apos;짤방 숨기기&apos; : `짤방 보기 (${validImages.length}개)`}
            &lt;/button&gt;

            {isExpanded &amp;&amp; (
              &lt;div className=&quot;grid grid-cols-2 gap-2 mt-2&quot;&gt;
                {validImages.map((image, idx) =&gt; (
                  &lt;div key={idx} className=&quot;relative group&quot;&gt;
                    &lt;img
                      src={image.url}
                      alt={image.title}
                      className=&quot;w-full h-32 object-cover rounded-lg&quot;
                      onError={(e) =&gt; {
                        e.target.parentElement.style.display = &apos;none&apos;;
                      }}
                    /&gt;
                    {image.source_url &amp;&amp; (
                      &lt;a
                        href={image.source_url}
                        target=&quot;_blank&quot;
                        rel=&quot;noopener noreferrer&quot;
                        className=&quot;absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 flex items-center justify-center text-white text-sm transition-opacity duration-200&quot;
                      &gt;
                        출처 보기
                      &lt;/a&gt;
                    )}
                  &lt;/div&gt;
                ))}
              &lt;/div&gt;
            )}
          &lt;/&gt;
        )}
      &lt;/div&gt;
    &lt;/div&gt;
  );
};

const ChatResponseArea = ({ response, isLoading }) =&gt; {
    if (isLoading) {
        return (
            &lt;div className=&quot;h-[95%] bg-gray-800 rounded-lg p-4 overflow-y-auto&quot;&gt;
                &lt;div className=&quot;flex items-center justify-center h-full&quot;&gt;
                    &lt;Wand2 className=&quot;animate-spin text-gray-400 mr-2&quot; /&gt;
                    &lt;p className=&quot;text-gray-400&quot;&gt;응답을 기다리는 중...&lt;/p&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        );
    }

    if (!response) {
        return (
            &lt;div className=&quot;h-[95%] bg-gray-800 rounded-lg p-4 overflow-y-auto&quot;&gt;
                &lt;div className=&quot;flex items-center justify-center h-full&quot;&gt;
                    &lt;p className=&quot;text-gray-400&quot;&gt;응답이 없습니다.&lt;/p&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        );
    }

    if (response.scenes) {
        return (
            &lt;div className=&quot;h-[95%] bg-gray-800 rounded-lg p-4 overflow-y-auto&quot;&gt;
                &lt;div className=&quot;space-y-2&quot;&gt;
                    {response.scenes.map((scene, index) =&gt; (
                        &lt;ChatMessage key={index} scene={scene} /&gt;
                    ))}
                &lt;/div&gt;
            &lt;/div&gt;
        );
    }

    const messages = typeof response.content === &apos;string&apos;
        ? response.content.split(&apos;---&apos;).filter(msg =&gt; msg.trim())
        : [response.content];

    return (
        &lt;div className=&quot;h-[95%] bg-gray-800 rounded-lg p-4 overflow-y-auto&quot;&gt;
            &lt;div className=&quot;space-y-2&quot;&gt;
                {messages.map((message, index) =&gt; (
                    &lt;div key={index} className=&quot;bg-gray-900 rounded-lg p-4&quot;&gt;
                        &lt;p className=&quot;text-gray-300 whitespace-pre-wrap&quot;&gt;{message.trim()}&lt;/p&gt;
                    &lt;/div&gt;
                ))}
            &lt;/div&gt;
        &lt;/div&gt;
    );
};

export const ChatPage = () =&gt; {
  const { chatId } = useParams();
  const [chatList, setChatList] = useRecoilState(chatListState);
  const [, setCurrentChat] = useRecoilState(currentChatState);
  const [input, setInput] = useState(&apos;&apos;);
  const [originalText, setOriginalText] = useState(&apos;&apos;);
  const [loading, setLoading] = useState(false);
  const [gptResponse, setGptResponse] = useState(&apos;&apos;);
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() =&gt; {
    const fetchChatData = async () =&gt; {
      if (chatId) {
        try {
          const response = await api.get(`/chat/${chatId}`);
          if (response.data.success) {
            setOriginalText(response.data.chat.response);
          }
        } catch (err) {
          console.error(&apos;Failed to fetch chat:&apos;, err);
        }
      }
    };

    fetchChatData();
  }, [chatId]);

  const handleSplitParagraphs = async () =&gt; {
    setIsLoading(true);
    try {
      const response = await api.post(&apos;/dalle-api-endpoint&apos;, { text: originalText });
      if (response.data.success) {
        setGptResponse({
          type: &apos;paragraphs&apos;,
          content: response.data.response
        });
      } else {
        console.error(&apos;Error:&apos;, response.data.error);
        setGptResponse({
          type: &apos;error&apos;,
          content: response.data.error || &apos;Error: No response data received&apos;
        });
      }
    } catch (err) {
      console.error(&apos;Failed to split paragraphs:&apos;, err);
      setGptResponse({
        type: &apos;error&apos;,
        content: &apos;Error: Failed to get response&apos;
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleGenerateTags = async () =&gt; {
    setIsLoading(true);
    try {
      const response = await api.post(&apos;/generate-shorts-script&apos;, { text: originalText });
      if (response.data.success &amp;&amp; response.data.scenes) {
        setGptResponse(response.data);
      } else {
        console.error(&apos;Error:&apos;, response.data.error);
        setGptResponse({
          type: &apos;error&apos;,
          content: response.data.error || &apos;응답을 생성하지 못했습니다.&apos;
        });
      }
    } catch (err) {
      console.error(&apos;Failed to generate tags:&apos;, err);
      setGptResponse({
        type: &apos;error&apos;,
        content: &apos;Failed to get response&apos;
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleSubmit = async (e) =&gt; {
    e.preventDefault();
    if (!input.trim() || loading) return;

    setLoading(true);
    try {
      const response = await api.post(&apos;/generate-story&apos;, {
        text: input,
        tone: &apos;기본&apos;,
      });

      if (response.data.success) {
        setChatList(prev =&gt; [...prev, {
          id: response.data.chat_id,
          message: input,
          response: response.data.response,
          created_at: new Date().toISOString()
        }]);

        setOriginalText(response.data.response);
        setInput(&apos;&apos;);
      }
    } catch (err) {
      console.error(&apos;Failed to send message:&apos;, err);
    } finally {
      setLoading(false);
    }
  };

  return (
    &lt;div className=&quot;grid grid-cols-[1fr_1fr] divide-y divide-gray-600 gap-4 h-full&quot;&gt;
      &lt;div className=&quot;h-full flex flex-col bg-gray-800&quot;&gt;
        &lt;div className=&quot;flex-1 overflow-hidden&quot;&gt;
          &lt;div className=&quot;h-full flex flex-col bg-gray-700 p-4&quot;&gt;
            &lt;h3 className=&quot;text-xl font-bold text-white mb-4&quot;&gt;현재 버전&lt;/h3&gt;
            &lt;div className=&quot;flex-1 overflow-auto bg-gray-800 rounded-lg p-4 mb-4&quot;&gt;
              &lt;div className=&quot;text-gray-300 whitespace-pre-wrap&quot;&gt;
                {originalText}
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div className=&quot;border-t border-gray-700 p-4&quot;&gt;
          &lt;form onSubmit={handleSubmit} className=&quot;flex gap-2&quot;&gt;
            &lt;input
              type=&quot;text&quot;
              value={input}
              onChange={(e) =&gt; setInput(e.target.value)}
              placeholder=&quot;수정 요청을 입력하세요...&quot;
              className=&quot;flex-1 bg-gray-700 border border-gray-600 rounded-lg px-4 py-2 text-white focus:outline-none focus:border-blue-500&quot;
              disabled={loading}
            /&gt;
            &lt;button
              type=&quot;submit&quot;
              disabled={loading}
              className=&quot;bg-blue-600 text-white p-2 rounded-lg hover:bg-blue-700 disabled:bg-gray-600&quot;
            &gt;
              &lt;Send size={20} /&gt;
            &lt;/button&gt;
          &lt;/form&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      &lt;div className=&quot;h-screen bg-gray-700 p-4 rounded-lg&quot;&gt;
        &lt;div className=&quot;flex justify-between items-center mb-4&quot;&gt;
          &lt;h3 className=&quot;text-xl font-bold text-white&quot;&gt;쇼츠 스크립트&lt;/h3&gt;
          &lt;div className=&quot;flex gap-2&quot;&gt;
            &lt;button
              onClick={handleSplitParagraphs}
              disabled={isLoading}
              className=&quot;px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-600 flex items-center gap-2&quot;
            &gt;
              &lt;Wand2 size={16} /&gt;
              문단 나누기
            &lt;/button&gt;
            &lt;button
              onClick={handleGenerateTags}
              disabled={isLoading}
              className=&quot;px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-600 flex items-center gap-2&quot;
            &gt;
              &lt;Search size={16} /&gt;
              짤방 태그 생성
            &lt;/button&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;ChatResponseArea response={gptResponse} isLoading={isLoading} /&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  );
};
</document_content>
</document>
<document index="1">
<source>components\LoginModal.js</source>
<document_content>
import React, { useState } from &apos;react&apos;;
import { useRecoilState } from &apos;recoil&apos;;
import { loginModalState } from &apos;../recoil/atoms&apos;;
import Modal from &apos;./common/Modal&apos;;
import AuthForm from &apos;./AuthForm&apos;;
import { useAuthForm } from &apos;../hooks/useAuthForm&apos;;

const LoginModal = () =&gt; {
  const [isOpen, setIsOpen] = useRecoilState(loginModalState);
  const [isRegister, setIsRegister] = useState(false);
  const {
    formData,
    error,
    loading,
    handleInputChange,
    handleSubmit,
    resetForm
  } = useAuthForm(isRegister ? &apos;register&apos; : &apos;login&apos;);

  const handleClose = () =&gt; {
    resetForm();
    setIsRegister(false);
    setIsOpen(false);
  };

  const handleFormSubmit = async (e) =&gt; {
    const success = await handleSubmit(e);
    if (success) {
      handleClose();
    }
  };

  const toggleAuthType = () =&gt; {
    setIsRegister(!isRegister);
    resetForm();
  };

  return (
    &lt;Modal
      isOpen={isOpen}
      onClose={handleClose}
      title={isRegister ? &apos;회원가입&apos; : &apos;로그인&apos;}
    &gt;
      &lt;AuthForm
        type={isRegister ? &apos;register&apos; : &apos;login&apos;}
        loading={loading}
        error={error}
        formData={formData}
        onSubmit={handleFormSubmit}
        onChange={handleInputChange}
        onToggleType={toggleAuthType}
      /&gt;
    &lt;/Modal&gt;
  );
};

export default LoginModal;
</document_content>
</document>
<document index="1">
<source>components\MemesPage.js</source>
<document_content>
import React from &apos;react&apos;;
import { Image } from &apos;lucide-react&apos;;

export const MemesPage = () =&gt; {
  return (
      &lt;iframe
          src=&quot;https://jjalbang.today/&quot;
          title=&quot;External Site&quot;
          className=&quot;w-full h-full rounded-lg border-2 border-gray-600&quot;
          sandbox=&quot;allow-same-origin allow-scripts allow-popups&quot;
      &gt;&lt;/iframe&gt;

      // &lt;div className=&quot;h-full bg-gray-700 rounded-lg p-6 overflow-auto&quot;&gt;
      //   &lt;div className=&quot;max-w-3xl mx-auto&quot;&gt;
      //     &lt;h2 className=&quot;text-2xl font-bold text-white mb-6&quot;&gt;짤 검색&lt;/h2&gt;
      //     &lt;div className=&quot;bg-gray-800 rounded-lg p-8 text-center&quot;&gt;
      //       &lt;Image size={64} className=&quot;mx-auto mb-4 text-gray-500&quot;/&gt;
      //       &lt;h3 className=&quot;text-xl font-semibold text-white mb-2&quot;&gt;
      //         짤 검색 기능 준비 중
      //       &lt;/h3&gt;
      //       &lt;p className=&quot;text-gray-400&quot;&gt;
      //         더 나은 서비스 제공을 위해 준비 중입니다. &lt;br/&gt;
      //         곧 만나뵙겠습니다!
      //       &lt;/p&gt;
      //     &lt;/div&gt;
      //   &lt;/div&gt;
      // &lt;/div&gt;

  );
};
</document_content>
</document>
<document index="1">
<source>components\MyPage.js</source>
<document_content>
import React, { useState, useEffect } from &apos;react&apos;;
import { User, MessageSquare, Clock, Edit2, Save, X } from &apos;lucide-react&apos;;
import { api } from &apos;../api/client&apos;;

export const MyPage = ({ user }) =&gt; {
  const [loading, setLoading] = useState(true);
  const [stats, setStats] = useState(null);
  const [chatHistory, setChatHistory] = useState([]);
  const [editMode, setEditMode] = useState(false);
  const [userInfo, setUserInfo] = useState({
    username: user?.username || &apos;&apos;,
    email: user?.email || &apos;&apos;
  });
  const [error, setError] = useState(null);

  useEffect(() =&gt; {
    fetchUserData();
  }, [user]);

  const fetchUserData = async () =&gt; {
    setLoading(true);
    try {
      const [statsResponse, historyResponse] = await Promise.all([
        api.get(&apos;/user/stats&apos;),
        api.get(&apos;/chat-history&apos;)
      ]);

      setStats(statsResponse.data);
      setChatHistory(historyResponse.data.items);
    } catch (err) {
      setError(&apos;데이터를 불러오는데 실패했습니다.&apos;);
      console.error(&apos;Failed to fetch user data:&apos;, err);
    } finally {
      setLoading(false);
    }
  };

  const handleUpdateProfile = async () =&gt; {
    try {
      await api.put(&apos;/auth/update&apos;, userInfo);
      setEditMode(false);
      setError(null);
    } catch (err) {
      setError(&apos;프로필 업데이트에 실패했습니다.&apos;);
      console.error(&apos;Failed to update profile:&apos;, err);
    }
  };

  if (loading) {
    return (
      &lt;div className=&quot;flex justify-center items-center h-full&quot;&gt;
        &lt;div className=&quot;animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500&quot; /&gt;
      &lt;/div&gt;
    );
  }

  return (
    &lt;div className=&quot;bg-gray-800 min-h-screen p-8&quot;&gt;
      &lt;div className=&quot;max-w-4xl mx-auto space-y-8&quot;&gt;
        {/* 프로필 섹션 */}
        &lt;div className=&quot;bg-gray-700 rounded-lg p-6&quot;&gt;
          &lt;div className=&quot;flex justify-between items-center mb-6&quot;&gt;
            &lt;h2 className=&quot;text-2xl font-bold text-white flex items-center&quot;&gt;
              &lt;User className=&quot;mr-2&quot; /&gt;
              프로필
            &lt;/h2&gt;
            &lt;button
              onClick={() =&gt; editMode ? handleUpdateProfile() : setEditMode(true)}
              className=&quot;flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700&quot;
            &gt;
              {editMode ? (
                &lt;&gt;
                  &lt;Save size={18} className=&quot;mr-2&quot; /&gt;
                  저장
                &lt;/&gt;
              ) : (
                &lt;&gt;
                  &lt;Edit2 size={18} className=&quot;mr-2&quot; /&gt;
                  수정
                &lt;/&gt;
              )}
            &lt;/button&gt;
          &lt;/div&gt;

          {error &amp;&amp; (
            &lt;div className=&quot;bg-red-500/10 text-red-400 p-4 rounded-lg mb-4&quot;&gt;
              {error}
            &lt;/div&gt;
          )}

          &lt;div className=&quot;space-y-4&quot;&gt;
            &lt;div&gt;
              &lt;label className=&quot;block text-sm text-gray-400 mb-1&quot;&gt;사용자명&lt;/label&gt;
              {editMode ? (
                &lt;input
                  type=&quot;text&quot;
                  value={userInfo.username}
                  onChange={(e) =&gt; setUserInfo({ ...userInfo, username: e.target.value })}
                  className=&quot;w-full px-4 py-2 bg-gray-600 text-white rounded-lg&quot;
                /&gt;
              ) : (
                &lt;p className=&quot;text-white&quot;&gt;{userInfo.username}&lt;/p&gt;
              )}
            &lt;/div&gt;
            &lt;div&gt;
              &lt;label className=&quot;block text-sm text-gray-400 mb-1&quot;&gt;이메일&lt;/label&gt;
              &lt;p className=&quot;text-white&quot;&gt;{userInfo.email}&lt;/p&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;

        {/* 통계 섹션 */}
        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-4&quot;&gt;
          &lt;div className=&quot;bg-gray-700 p-6 rounded-lg&quot;&gt;
            &lt;div className=&quot;flex items-center justify-between&quot;&gt;
              &lt;h3 className=&quot;text-gray-400&quot;&gt;총 대화 수&lt;/h3&gt;
              &lt;MessageSquare className=&quot;text-blue-500&quot; /&gt;
            &lt;/div&gt;
            &lt;p className=&quot;text-2xl font-bold text-white mt-2&quot;&gt;
              {stats?.totalChats || 0}
            &lt;/p&gt;
          &lt;/div&gt;
          &lt;div className=&quot;bg-gray-700 p-6 rounded-lg&quot;&gt;
            &lt;div className=&quot;flex items-center justify-between&quot;&gt;
              &lt;h3 className=&quot;text-gray-400&quot;&gt;생성된 스토리&lt;/h3&gt;
              &lt;Edit2 className=&quot;text-green-500&quot; /&gt;
            &lt;/div&gt;
            &lt;p className=&quot;text-2xl font-bold text-white mt-2&quot;&gt;
              {stats?.totalStories || 0}
            &lt;/p&gt;
          &lt;/div&gt;
          &lt;div className=&quot;bg-gray-700 p-6 rounded-lg&quot;&gt;
            &lt;div className=&quot;flex items-center justify-between&quot;&gt;
              &lt;h3 className=&quot;text-gray-400&quot;&gt;가입일&lt;/h3&gt;
              &lt;Clock className=&quot;text-purple-500&quot; /&gt;
            &lt;/div&gt;
            &lt;p className=&quot;text-lg font-medium text-white mt-2&quot;&gt;
              {new Date(stats?.joinDate || Date.now()).toLocaleDateString()}
            &lt;/p&gt;
          &lt;/div&gt;
        &lt;/div&gt;

        {/* 최근 대화 내역 */}
        &lt;div className=&quot;bg-gray-700 rounded-lg p-6&quot;&gt;
          &lt;h2 className=&quot;text-xl font-bold text-white mb-4 flex items-center&quot;&gt;
            &lt;MessageSquare className=&quot;mr-2&quot; /&gt;
            최근 대화 내역
          &lt;/h2&gt;
          &lt;div className=&quot;space-y-4&quot;&gt;
            {chatHistory.map((chat, index) =&gt; (
              &lt;div key={index} className=&quot;border-l-2 border-blue-500 pl-4&quot;&gt;
                &lt;div className=&quot;text-sm text-gray-400&quot;&gt;
                  {new Date(chat.created_at).toLocaleString()}
                &lt;/div&gt;
                &lt;div className=&quot;mt-1 text-white&quot;&gt;
                  &lt;p className=&quot;text-gray-300&quot;&gt;{chat.message}&lt;/p&gt;
                  &lt;p className=&quot;mt-2 text-blue-400&quot;&gt;{chat.response}&lt;/p&gt;
                &lt;/div&gt;
              &lt;/div&gt;
            ))}
            {chatHistory.length === 0 &amp;&amp; (
              &lt;p className=&quot;text-gray-400 text-center py-4&quot;&gt;
                아직 대화 내역이 없습니다.
              &lt;/p&gt;
            )}
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  );
};
</document_content>
</document>
<document index="1">
<source>components\OCRInput.js</source>
<document_content>
import React, { useState } from &apos;react&apos;;
import { useRecoilState } from &apos;recoil&apos;;
import { api } from &apos;../api/client&apos;;
import { storyGeneratorState } from &apos;../recoil/atoms&apos;;

export const OCRInput = () =&gt; {
  const [imageUrl, setImageUrl] = useState(&apos;&apos;);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [storyState, setStoryState] = useRecoilState(storyGeneratorState);

  const handleTextExtraction = async () =&gt; {
    if (!imageUrl) return;

    setLoading(true);
    setError(null);
    try {
      const response = await api.post(&apos;/extract-text&apos;, {
        image_url: imageUrl
      });

      if (response.data.success) {
        const newText = response.data.text;
        setStoryState(prev =&gt; ({
          ...prev,
          text: prev.text ? `${prev.text}\n\n${newText}` : newText
        }));
        setImageUrl(&apos;&apos;);
      } else {
        setError(response.data.error || &apos;텍스트 추출에 실패했습니다.&apos;);
      }
    } catch (err) {
      console.error(&apos;OCR failed:&apos;, err);
      setError(err.response?.data?.detail || err.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    &lt;div className=&quot;bg-gray-700 rounded-lg shadow-lg&quot;&gt;
      &lt;div className=&quot;p-4&quot;&gt;
        &lt;h3 className=&quot;text-lg font-semibold mb-4 text-white&quot;&gt;이미지에서 텍스트 추출&lt;/h3&gt;
        &lt;div className=&quot;space-y-3&quot;&gt;
          &lt;input
            type=&quot;text&quot;
            value={imageUrl}
            onChange={(e) =&gt; setImageUrl(e.target.value)}
            placeholder=&quot;https://example.com/image.jpg&quot;
            className=&quot;w-full px-3 py-2 bg-gray-600 border border-gray-500 rounded text-white text-sm&quot;
          /&gt;
          &lt;button
            onClick={handleTextExtraction}
            disabled={loading || !imageUrl}
            className=&quot;w-full bg-blue-600 text-white py-2 px-4 rounded text-sm hover:bg-blue-700 disabled:bg-gray-500&quot;
          &gt;
            {loading ? &quot;추출 중...&quot; : &quot;텍스트 추출&quot;}
          &lt;/button&gt;
          {error &amp;&amp; &lt;p className=&quot;text-red-400 text-xs&quot;&gt;{error}&lt;/p&gt;}
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  );
};
</document_content>
</document>
<document index="1">
<source>components\PostsPage.js</source>
<document_content>
import React from &apos;react&apos;;
import { useRecoilState } from &apos;recoil&apos;;
import { selectedPostState } from &apos;../recoil/atoms&apos;;
import PostList from &apos;./posts/PostList&apos;;
import {ContentViewer} from &apos;./content/ContentViewer&apos;;
// import { ContentViewer }from &apos;../legacy/ContentViewer&apos;;
import { OCRInput } from &apos;./OCRInput&apos;;
import { StoryGenerator } from &apos;./StoryGenerator&apos;;

export const PostsPage = () =&gt; {
  const [selectedPost, setSelectedPost] = useRecoilState(selectedPostState);

  return (
    &lt;div className=&quot;h-full grid grid-cols-3 gap-4&quot;&gt;
      {/* 왼쪽: OCR 및 스토리 생성기 */}
      &lt;div className=&quot;space-y-4&quot;&gt;
        &lt;OCRInput /&gt;
        &lt;StoryGenerator /&gt;
      &lt;/div&gt;

      {/* 중앙: 게시글 목록 */}
      &lt;div&gt;
        &lt;PostList onSelectPost={setSelectedPost} /&gt;
      &lt;/div&gt;

      {/* 오른쪽: 게시글 내용 */}
      &lt;div&gt;
        &lt;ContentViewer selectedPost={selectedPost} /&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  );
};
</document_content>
</document>
<document index="1">
<source>components\SettingsPage.js</source>
<document_content>
import React from &apos;react&apos;;

export const SettingsPage = () =&gt; {
  return (
    &lt;div className=&quot;h-full bg-gray-700 rounded-lg p-6 overflow-auto&quot;&gt;
      &lt;div className=&quot;max-w-3xl mx-auto&quot;&gt;
        &lt;h2 className=&quot;text-2xl font-bold text-white mb-6&quot;&gt;AI 설정&lt;/h2&gt;
        &lt;div className=&quot;space-y-6&quot;&gt;
          &lt;div className=&quot;bg-gray-800 rounded-lg p-6&quot;&gt;
            &lt;h3 className=&quot;text-lg font-semibold text-white mb-4&quot;&gt;
              AI 모델 설정 (준비 중)
            &lt;/h3&gt;
            &lt;div className=&quot;space-y-4 text-gray-400&quot;&gt;
              &lt;p&gt;• AI 모델 선택&lt;/p&gt;
              &lt;p&gt;• 응답 길이 조정&lt;/p&gt;
              &lt;p&gt;• 창의성 수준 설정&lt;/p&gt;
              &lt;p&gt;• 특정 주제 필터링&lt;/p&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div className=&quot;bg-gray-800 rounded-lg p-6&quot;&gt;
            &lt;h3 className=&quot;text-lg font-semibold text-white mb-4&quot;&gt;
              개인화 설정 (준비 중)
            &lt;/h3&gt;
            &lt;div className=&quot;space-y-4 text-gray-400&quot;&gt;
              &lt;p&gt;• 선호하는 글쓰기 스타일&lt;/p&gt;
              &lt;p&gt;• 자주 사용하는 프롬프트 저장&lt;/p&gt;
              &lt;p&gt;• 응답 형식 커스터마이징&lt;/p&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  );
};
</document_content>
</document>
<document index="1">
<source>components\SideMenu.js</source>
<document_content>
import React, { useEffect } from &apos;react&apos;;
import { NavLink } from &apos;react-router-dom&apos;;
import { useRecoilState, useRecoilValue } from &apos;recoil&apos;;
import { LayoutGrid, Image, Settings, MessageSquare } from &apos;lucide-react&apos;;
import { sidebarState, userState } from &apos;../recoil/atoms&apos;;
import { api } from &apos;../api/client&apos;;

export const SideMenu = () =&gt; {
  const [sidebarData, setSidebarData] = useRecoilState(sidebarState);
  const user = useRecoilValue(userState);

  const menuItems = [
    { icon: &lt;LayoutGrid size={20} /&gt;, text: &quot;게시판&quot;, path: &quot;/&quot; },
    { icon: &lt;Image size={20} /&gt;, text: &quot;짤 검색&quot;, path: &quot;/memes&quot; },
    { icon: &lt;Settings size={20} /&gt;, text: &quot;AI 설정&quot;, path: &quot;/settings&quot; },
  ];

  // 사용자의 채팅 기록 가져오기
  useEffect(() =&gt; {
    const fetchChatHistory = async () =&gt; {
      if (user) {
        try {
          const response = await api.get(&apos;/chat/history&apos;);
          if (response.data.success) {
            setSidebarData(prev =&gt; ({
              ...prev,
              chatHistory: response.data.chats
            }));
          }
        } catch (err) {
          console.error(&apos;Failed to fetch chat history:&apos;, err);
        }
      }
    };

    fetchChatHistory();
  }, [user, setSidebarData]);

  return (
    &lt;nav className=&quot;w-16 hover:w-64 transition-all duration-300 bg-gray-900 h-screen flex-shrink-0 flex flex-col&quot;&gt;
      {/* 메인 메뉴 */}
      &lt;ul className=&quot;py-4 space-y-2&quot;&gt;
        {menuItems.map((item, index) =&gt; (
          &lt;li key={index}&gt;
            &lt;NavLink
              to={item.path}
              className={({ isActive }) =&gt; `
                flex items-center px-4 py-3 text-gray-400 hover:text-white
                ${isActive ? &apos;bg-gray-800 text-white&apos; : &apos;&apos;}
              `}
            &gt;
              &lt;span className=&quot;flex-shrink-0&quot;&gt;{item.icon}&lt;/span&gt;
              &lt;span className=&quot;ml-4 whitespace-nowrap overflow-hidden opacity-100 transition-opacity duration-300&quot;&gt;
                {item.text}
              &lt;/span&gt;
            &lt;/NavLink&gt;
          &lt;/li&gt;
        ))}
      &lt;/ul&gt;

      {/* 채팅 히스토리 섹션 */}
      {user &amp;&amp; (
        &lt;div className=&quot;mt-4 flex-1 overflow-y-auto&quot;&gt;
          &lt;div className=&quot;px-4 py-2 text-sm font-semibold text-gray-400&quot;&gt;
            이전 대화
          &lt;/div&gt;
          &lt;ul className=&quot;space-y-1&quot;&gt;
            {sidebarData.chatHistory.map((chat) =&gt; (
              &lt;li key={chat.id}&gt;
                &lt;NavLink
                  to={`/chat/${chat.id}`}
                  className={({ isActive }) =&gt; `
                    flex items-center px-4 py-2 text-sm text-gray-400 hover:text-white hover:bg-gray-800
                    ${isActive ? &apos;bg-gray-800 text-white&apos; : &apos;&apos;}
                  `}
                &gt;
                  &lt;MessageSquare size={16} className=&quot;mr-2&quot; /&gt;
                  &lt;span className=&quot;truncate&quot;&gt;
                    {chat.title || `Chat ${new Date(chat.created_at).toLocaleDateString()}`}
                  &lt;/span&gt;
                &lt;/NavLink&gt;
              &lt;/li&gt;
            ))}
          &lt;/ul&gt;
        &lt;/div&gt;
      )}
    &lt;/nav&gt;
  );
};
</document_content>
</document>
<document index="1">
<source>components\StoryGenerator.js</source>
<document_content>
import React, { useState, useEffect } from &apos;react&apos;;
import { useRecoilState } from &apos;recoil&apos;;
import { useNavigate } from &apos;react-router-dom&apos;;
import { api } from &apos;../api/client&apos;;
import { storyGeneratorState, chatHistoryState } from &apos;../recoil/atoms&apos;;
import { MessageSquare } from &apos;lucide-react&apos;;
import { userState } from &apos;../recoil/atoms&apos;;

export const StoryGenerator = () =&gt; {
  const [user] = useRecoilState(userState);
  const navigate = useNavigate();
  const [storyState, setStoryState] = useRecoilState(storyGeneratorState);
  const [, setChatHistory] = useRecoilState(chatHistoryState);

  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [toneStyles, setToneStyles] = useState({});
  const [generatedChatId, setGeneratedChatId] = useState(null);

  useEffect(() =&gt; {
    const fetchToneStyles = async () =&gt; {
      try {
        const response = await api.get(&apos;/api/tone-styles&apos;);
        setToneStyles(response.data);
      } catch (err) {
        console.error(&apos;Failed to fetch tone styles:&apos;, err);
      }
    };
    fetchToneStyles();
  }, []);

  const handleGenerate = async () =&gt; {
    if (!storyState.text) return;

    setLoading(true);
    setError(null);
    try {
      console.log(&apos;Generating story...&apos;);
      const response = await api.post(&apos;/generate-story&apos;, {
        text: storyState.text,
        tone: storyState.tone
      });

      console.log(&apos;Response:&apos;, response.data);

      if (response.data.success) {
        setStoryState(prev =&gt; ({
          ...prev,
          result: response.data.response
        }));

        setGeneratedChatId(response.data.chat_id);
        console.log(&apos;Generated chat ID:&apos;, response.data.chat_id);

        setChatHistory(prev =&gt; [...prev, {
          message: storyState.text,
          response: response.data.response,
          timestamp: new Date().toISOString()
        }]);
      } else {
        setError(response.data.error || &apos;스토리 생성에 실패했습니다.&apos;);
      }
    } catch (err) {
      console.error(&apos;Error generating story:&apos;, err);
      setError(`스토리 생성 실패: ${err.response?.data?.detail || err.message}`);
    } finally {
      setLoading(false);
    }
  };

  const handleChatEdit = () =&gt; {
    if (generatedChatId) {
      console.log(&apos;Navigating to chat:&apos;, generatedChatId);
      // 채팅 페이지로 이동하기 전에 필요한 정보를 저장
      localStorage.setItem(&apos;currentChatText&apos;, storyState.result);
      navigate(`/chat/${generatedChatId}`);
    } else {
      console.error(&apos;No chat ID available&apos;);
      setError(&apos;채팅 ID를 찾을 수 없습니다.&apos;);
    }
  };

  const handleReset = () =&gt; {
    setStoryState({
      text: &apos;&apos;,
      result: &apos;&apos;,
      tone: &apos;기본&apos;,
      modificationInput: &apos;&apos;
    });
    setError(null);
    setGeneratedChatId(null);
  };

  return (
    &lt;div className=&quot;bg-gray-700 rounded-lg shadow-lg&quot;&gt;
      &lt;div className=&quot;p-4&quot;&gt;
        &lt;h3 className=&quot;text-lg font-semibold mb-4 text-white&quot;&gt;스토리 생성기&lt;/h3&gt;
        &lt;div className=&quot;space-y-3&quot;&gt;
          &lt;textarea
            value={storyState.text}
            onChange={(e) =&gt; setStoryState(prev =&gt; ({ ...prev, text: e.target.value }))}
            rows={6}
            className=&quot;w-full px-3 py-2 bg-gray-600 border border-gray-500 rounded text-white text-sm&quot;
            placeholder=&quot;텍스트를 입력하세요&quot;
          /&gt;
          &lt;select
            value={storyState.tone}
            onChange={(e) =&gt; setStoryState(prev =&gt; ({ ...prev, tone: e.target.value }))}
            className=&quot;w-full px-3 py-2 bg-gray-600 border border-gray-500 rounded text-white text-sm&quot;
          &gt;
            {Object.entries(toneStyles).map(([key, value]) =&gt; (
              &lt;option key={key} value={key}&gt;{key}&lt;/option&gt;
            ))}
          &lt;/select&gt;
          &lt;button
            onClick={handleGenerate}
            disabled={loading || !storyState.text}
            className=&quot;w-full bg-blue-600 text-white py-2 px-4 rounded text-sm hover:bg-blue-700 disabled:bg-gray-500&quot;
          &gt;
            {loading ? &quot;생성 중...&quot; : &quot;스토리 생성&quot;}
          &lt;/button&gt;
          {error &amp;&amp; (
            &lt;p className=&quot;text-red-400 text-xs break-words&quot;&gt;{error}&lt;/p&gt;
          )}
          {storyState.result &amp;&amp; (
            &lt;div className=&quot;space-y-2&quot;&gt;
              &lt;textarea
                value={storyState.result}
                readOnly
                rows={8}
                className=&quot;w-full px-3 py-2 bg-gray-600 border border-gray-500 rounded text-white text-sm&quot;
              /&gt;
              &lt;div className=&quot;flex space-x-2&quot;&gt;
                &lt;button
                  onClick={handleChatEdit}
                  // disabled={!generatedChatId || !user}  // user 상태 확인
                  className=&quot;flex-1 bg-purple-600 text-white py-2 px-4 rounded text-sm hover:bg-purple-700
                            flex items-center justify-center gap-2 disabled:bg-gray-500&quot;
                  title={!user ? &quot;로그인이 필요합니다&quot; : &quot;&quot;}  // 툴팁 추가
                &gt;
                  &lt;MessageSquare size={16} /&gt;
                  {user ? &quot;채팅으로 수정하기&quot; : &quot;로그인하여 수정하기&quot;}
                &lt;/button&gt;
                &lt;button
                  onClick={handleReset}
                  className=&quot;flex-1 border border-gray-500 text-white py-2 px-4 rounded text-sm hover:bg-gray-600&quot;
                &gt;
                  초기화
                &lt;/button&gt;
              &lt;/div&gt;
              &lt;button
                onClick={() =&gt; navigator.clipboard.writeText(storyState.result)}
                className=&quot;w-full border border-gray-500 py-2 px-4 rounded text-sm hover:bg-gray-600 text-white&quot;
              &gt;
                📋 복사
              &lt;/button&gt;
            &lt;/div&gt;
          )}
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  );
};
</document_content>
</document>
<document index="1">
<source>components\StoryPage.js</source>
<document_content>
import React, { useCallback } from &apos;react&apos;;
import { useRecoilState } from &apos;recoil&apos;;
import { storyGeneratorState, chatHistoryState } from &apos;../recoil/atoms&apos;;
import { OCRInput } from &apos;./OCRInput&apos;;
import { StoryGenerator } from &apos;./StoryGenerator&apos;;
import { ChatHistory } from &apos;./ChatHistory&apos;;

export const StoryPage = () =&gt; {
  const [storyState, setStoryState] = useRecoilState(storyGeneratorState);
  const [chatHistory] = useRecoilState(chatHistoryState);

  const handleTextExtracted = useCallback((text) =&gt; {
    setStoryState(prev =&gt; ({
      ...prev,
      text: prev.text ? `${prev.text}\n\n${text}` : text
    }));
  }, [setStoryState]);

  return (
    &lt;div className=&quot;h-full grid grid-cols-2 gap-4 overflow-auto&quot;&gt;
      &lt;div className=&quot;space-y-4&quot;&gt;
        &lt;OCRInput onTextExtracted={handleTextExtracted} /&gt;
        &lt;StoryGenerator /&gt;
      &lt;/div&gt;
      &lt;ChatHistory /&gt;
    &lt;/div&gt;
  );
};
</document_content>
</document>
<document index="1">
<source>components\UserMenu.js</source>
<document_content>
import React, { useState } from &apos;react&apos;;
import { useRecoilState } from &apos;recoil&apos;;
import { userState, loginModalState } from &apos;../recoil/atoms&apos;;
import { authApi } from &apos;../api/auth&apos;;

export const UserMenu = () =&gt; {
  const [user, setUser] = useRecoilState(userState);
  const [, setLoginModalOpen] = useRecoilState(loginModalState);

  const handleLogout = async () =&gt; {
    await authApi.logout();
    setUser(null);
  };

  return (
    &lt;div className=&quot;relative&quot;&gt;
      {user ? (
        &lt;button
          onClick={handleLogout}
          className=&quot;text-white hover:text-gray-300 px-4 py-2&quot;
        &gt;
          로그아웃
        &lt;/button&gt;
      ) : (
        &lt;button
          onClick={() =&gt; setLoginModalOpen(true)}
          className=&quot;text-white hover:text-gray-300 px-4 py-2&quot;
        &gt;
          로그인
        &lt;/button&gt;
      )}
    &lt;/div&gt;
  );
};
</document_content>
</document>
<document index="1">
<source>components\common\Button.js</source>
<document_content>
import React from &apos;react&apos;;

const variantClasses = {
  primary: &apos;bg-blue-600 hover:bg-blue-700 text-white&apos;,
  secondary: &apos;bg-gray-600 hover:bg-gray-700 text-white&apos;,
  outline: &apos;border border-gray-600 hover:bg-gray-600 text-white&apos;,
  danger: &apos;bg-red-600 hover:bg-red-700 text-white&apos;,
};

const sizeClasses = {
  sm: &apos;px-3 py-1 text-sm&apos;,
  md: &apos;px-4 py-2&apos;,
  lg: &apos;px-6 py-3 text-lg&apos;,
};

const Button = ({
  children,
  variant = &apos;primary&apos;,
  size = &apos;md&apos;,
  fullWidth = false,
  isLoading = false,
  disabled = false,
  className = &apos;&apos;,
  ...props
}) =&gt; {
  return (
    &lt;button
      className={`
        ${variantClasses[variant]}
        ${sizeClasses[size]}
        ${fullWidth ? &apos;w-full&apos; : &apos;&apos;}
        rounded-lg transition-colors duration-200
        disabled:opacity-50 disabled:cursor-not-allowed
        flex items-center justify-center gap-2
        ${className}
      `}
      disabled={disabled || isLoading}
      {...props}
    &gt;
      {isLoading ? (
        &lt;&gt;
          &lt;span className=&quot;animate-spin rounded-full h-4 w-4 border-b-2 border-white&quot; /&gt;
          &lt;span&gt;처리중...&lt;/span&gt;
        &lt;/&gt;
      ) : (
        children
      )}
    &lt;/button&gt;
  );
};

export default Button;
</document_content>
</document>
<document index="1">
<source>components\common\Input.js</source>
<document_content>
import React from &apos;react&apos;;

const Input = ({
  label,
  error,
  className = &apos;&apos;,
  type = &apos;text&apos;,
  ...props
}) =&gt; {
  return (
    &lt;div className=&quot;space-y-1&quot;&gt;
      {label &amp;&amp; (
        &lt;label className=&quot;block text-sm text-gray-300&quot;&gt;
          {label}
        &lt;/label&gt;
      )}
      &lt;input
        type={type}
        className={`
          w-full px-3 py-2 bg-gray-700 rounded-lg text-white
          border border-gray-600 
          focus:border-blue-500 focus:outline-none
          disabled:opacity-50 disabled:cursor-not-allowed
          ${error ? &apos;border-red-500&apos; : &apos;&apos;}
          ${className}
        `}
        {...props}
      /&gt;
      {error &amp;&amp; (
        &lt;p className=&quot;text-red-400 text-sm mt-1&quot;&gt;{error}&lt;/p&gt;
      )}
    &lt;/div&gt;
  );
};

export default Input;
</document_content>
</document>
<document index="1">
<source>components\common\Modal.js</source>
<document_content>
import React from &apos;react&apos;;
import { X } from &apos;lucide-react&apos;;

const Modal = ({
  isOpen,
  onClose,
  title,
  children,
  className = &apos;&apos;,
}) =&gt; {
  if (!isOpen) return null;

  return (
    &lt;div className=&quot;fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50&quot;&gt;
      &lt;div className={`bg-gray-800 rounded-lg w-96 relative ${className}`}&gt;
        &lt;div className=&quot;p-6&quot;&gt;
          &lt;div className=&quot;flex justify-between items-center mb-4&quot;&gt;
            &lt;h2 className=&quot;text-xl font-semibold text-white&quot;&gt;{title}&lt;/h2&gt;
            &lt;button
              onClick={onClose}
              className=&quot;text-gray-400 hover:text-white transition-colors&quot;
            &gt;
              &lt;X size={20} /&gt;
            &lt;/button&gt;
          &lt;/div&gt;
          {children}
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  );
};

export default Modal;
</document_content>
</document>
<document index="1">
<source>components\common\Pagination.js</source>
<document_content>
import React from &apos;react&apos;;

export const Pagination = ({ currentPage, totalPages, onPageChange }) =&gt; {
  const pageGroup = Math.floor(currentPage / 5);
  const startPage = pageGroup * 5;
  const endPage = Math.min(startPage + 5, totalPages);

  return (
    &lt;div className=&quot;mt-auto pt-3&quot;&gt;
      &lt;div className=&quot;flex justify-center items-center space-x-1&quot;&gt;
        &lt;button
          onClick={() =&gt; onPageChange(Math.max(0, currentPage - 5))}
          disabled={currentPage === 0}
          className=&quot;px-2 py-1 border border-gray-500 rounded text-sm hover:bg-gray-600 disabled:bg-gray-600 text-white&quot;
        &gt;
          {&quot;&lt;&lt;&quot;}
        &lt;/button&gt;
        {[...Array(endPage - startPage)].map((_, i) =&gt; {
          const pageNum = startPage + i;
          return (
            &lt;button
              key={pageNum}
              onClick={() =&gt; onPageChange(pageNum)}
              className={`px-3 py-1 border border-gray-500 rounded text-sm hover:bg-gray-600 text-white ${
                pageNum === currentPage ? &apos;bg-gray-600&apos; : &apos;&apos;
              }`}
            &gt;
              {pageNum + 1}
            &lt;/button&gt;
          );
        })}
        &lt;button
          onClick={() =&gt; onPageChange(Math.min(totalPages - 1, currentPage + 1))}
          disabled={currentPage &gt;= totalPages - 1}
          className=&quot;px-2 py-1 border border-gray-500 rounded text-sm hover:bg-gray-600 disabled:bg-gray-600 text-white&quot;
        &gt;
          {&quot;&gt;&quot;}
        &lt;/button&gt;
        &lt;button
          onClick={() =&gt; onPageChange(Math.min(totalPages - 1, (pageGroup + 1) * 5))}
          disabled={currentPage &gt;= totalPages - 1}
          className=&quot;px-2 py-1 border border-gray-500 rounded text-sm hover:bg-gray-600 disabled:bg-gray-600 text-white&quot;
        &gt;
          {&quot;&gt;&gt;&quot;}
        &lt;/button&gt;
      &lt;/div&gt;
      &lt;div className=&quot;text-center text-sm text-gray-300 mt-2&quot;&gt;
        페이지: {currentPage + 1} / {totalPages}
      &lt;/div&gt;
    &lt;/div&gt;
  );
};
</document_content>
</document>
<document index="1">
<source>components\content\ContentToolbar.js</source>
<document_content>
import React, { useState } from &apos;react&apos;;
import { LinkIcon, ExternalLink, Copy, Check, Crosshair } from &apos;lucide-react&apos;;

const ContentToolbar = ({
  url,
  title,
  isInspecting,
  onInspectToggle,
  onCustomUrlSubmit
}) =&gt; {
  const [showUrlInput, setShowUrlInput] = useState(false);
  const [customUrl, setCustomUrl] = useState(&apos;&apos;);
  const [copied, setCopied] = useState(false);

  const handleUrlSubmit = (e) =&gt; {
    e.preventDefault();
    onCustomUrlSubmit(customUrl);
    setShowUrlInput(false);
    setCustomUrl(&apos;&apos;);
  };

  const handleCopyUrl = async () =&gt; {
    if (url) {
      try {
        await navigator.clipboard.writeText(url);
        setCopied(true);
        setTimeout(() =&gt; setCopied(false), 2000);
      } catch (err) {
        console.error(&apos;Failed to copy URL:&apos;, err);
      }
    }
  };

  return (
    &lt;div className=&quot;p-4 border-b border-gray-600&quot;&gt;
      &lt;div className=&quot;flex items-center justify-between&quot;&gt;
        &lt;h3 className=&quot;text-lg font-semibold text-white&quot;&gt;{title}&lt;/h3&gt;
        &lt;div className=&quot;flex items-center space-x-2&quot;&gt;
          {url &amp;&amp; (
            &lt;button
              onClick={handleCopyUrl}
              className=&quot;p-2 text-gray-300 hover:text-white rounded-lg hover:bg-gray-600&quot;
              title={copied ? &quot;복사됨&quot; : &quot;URL 복사&quot;}
            &gt;
              {copied ? &lt;Check size={20} /&gt; : &lt;Copy size={20} /&gt;}
            &lt;/button&gt;
          )}
          &lt;button
            onClick={() =&gt; setShowUrlInput(!showUrlInput)}
            className=&quot;p-2 text-gray-300 hover:text-white rounded-lg hover:bg-gray-600&quot;
            title=&quot;URL 직접 입력&quot;
          &gt;
            &lt;LinkIcon size={20} /&gt;
          &lt;/button&gt;
          &lt;button
            onClick={() =&gt; onInspectToggle(!isInspecting)}
            className={`p-2 rounded-lg ${
              isInspecting 
                ? &apos;bg-blue-500 text-white&apos; 
                : &apos;text-gray-300 hover:text-white hover:bg-gray-600&apos;
            }`}
            title=&quot;요소 검사&quot;
          &gt;
            &lt;Crosshair size={20} /&gt;
          &lt;/button&gt;
          {url &amp;&amp; (
            &lt;a
              href={url}
              target=&quot;_blank&quot;
              rel=&quot;noopener noreferrer&quot;
              className=&quot;p-2 text-gray-300 hover:text-white rounded-lg hover:bg-gray-600&quot;
              title=&quot;새 탭에서 열기&quot;
            &gt;
              &lt;ExternalLink size={20} /&gt;
            &lt;/a&gt;
          )}
        &lt;/div&gt;
      &lt;/div&gt;

      {showUrlInput &amp;&amp; (
        &lt;form onSubmit={handleUrlSubmit} className=&quot;mt-4&quot;&gt;
          &lt;div className=&quot;flex items-center space-x-2&quot;&gt;
            &lt;input
              type=&quot;url&quot;
              value={customUrl}
              onChange={(e) =&gt; setCustomUrl(e.target.value)}
              placeholder=&quot;URL 입력...&quot;
              className=&quot;flex-1 px-3 py-2 bg-gray-600 border border-gray-500 rounded text-white text-sm&quot;
              required
            /&gt;
            &lt;button
              type=&quot;submit&quot;
              className=&quot;px-4 py-2 bg-blue-600 text-white rounded text-sm hover:bg-blue-700&quot;
            &gt;
              확인
            &lt;/button&gt;
          &lt;/div&gt;
        &lt;/form&gt;
      )}
    &lt;/div&gt;
  );
};

export default ContentToolbar;
</document_content>
</document>
<document index="1">
<source>components\content\ContentViewer.js</source>
<document_content>
import React, { useState, useEffect } from &apos;react&apos;;
import { api } from &apos;../../api/client&apos;;
import ContentToolbar from &apos;./ContentToolbar&apos;;
import ElementInspector from &apos;./ElementInspector&apos;;

const style = `
  .content-frame-wrapper {
    width: 100%;
    height: 100%;
    max-height: calc(100vh - 50px);
    overflow: hidden;
    background: white;
    border-radius: 0.5rem;
  }
  .content-frame {
    width: 100%;
    height: 100%;
    border: none;
  }
`;

export const ContentViewer = ({ selectedPost }) =&gt; {
  const [content, setContent] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [isInspecting, setIsInspecting] = useState(false);
  const [elementInfo, setElementInfo] = useState(null);

  useEffect(() =&gt; {
    if (!selectedPost) {
      setContent(null);
      return;
    }

    const fetchContent = async (url = selectedPost.url) =&gt; {
      setLoading(true);
      setError(null);
      try {
        const response = await api.post(&apos;/extract-content&apos;, { url });

        // iframe에서 부모로 메시지를 보내기 위한 스크립트
        const inspectorScript = isInspecting ? `
          &lt;script&gt;
            document.body.style.cursor = &apos;crosshair&apos;;
            let lastHighlighted = null;

            function getElementInfo(element) {
              const rect = element.getBoundingClientRect();
              const computedStyle = window.getComputedStyle(element);
              
              return {
                tagName: element.tagName.toLowerCase(),
                classes: Array.from(element.classList),
                id: element.id,
                dimensions: {
                  width: Math.round(rect.width),
                  height: Math.round(rect.height)
                },
                position: {
                  top: Math.round(rect.top),
                  left: Math.round(rect.left)
                },
                styles: {
                  color: computedStyle.color,
                  backgroundColor: computedStyle.backgroundColor,
                  fontSize: computedStyle.fontSize,
                  padding: computedStyle.padding,
                  margin: computedStyle.margin
                },
                text: element.textContent.trim()
              };
            }

            document.addEventListener(&apos;mouseover&apos;, (e) =&gt; {
              if (lastHighlighted) {
                lastHighlighted.style.outline = &apos;&apos;;
                lastHighlighted.style.backgroundColor = &apos;&apos;;
              }

              const target = e.target;
              target.style.outline = &apos;2px solid #3b82f6&apos;;
              target.style.backgroundColor = &apos;rgba(59, 130, 246, 0.1)&apos;;
              lastHighlighted = target;

              const info = getElementInfo(target);
              window.parent.postMessage({ type: &apos;elementInfo&apos;, info }, &apos;*&apos;);
            }, true);

            document.addEventListener(&apos;mouseout&apos;, () =&gt; {
              if (lastHighlighted) {
                lastHighlighted.style.outline = &apos;&apos;;
                lastHighlighted.style.backgroundColor = &apos;&apos;;
                lastHighlighted = null;
              }
            }, true);
          &lt;/script&gt;
        ` : &apos;&apos;;

        const frameContent = `
          &lt;div class=&quot;content-frame-wrapper&quot;&gt;
            &lt;iframe
              id=&quot;contentFrame&quot;
              class=&quot;content-frame&quot;
              src=&quot;${response.data.url}&quot;
              sandbox=&quot;allow-same-origin allow-scripts allow-popups allow-forms&quot;
              loading=&quot;lazy&quot;
            &gt;&lt;/iframe&gt;
            ${inspectorScript}
          &lt;/div&gt;
        `;

        setContent({
          styles: `&lt;style&gt;${style}&lt;/style&gt;`,
          content: frameContent,
          url: response.data.url
        });
      } catch (err) {
        console.error(&apos;Content loading failed:&apos;, err);
        setError(err.response?.data?.detail || &apos;콘텐츠를 불러오는데 실패했습니다.&apos;);
      } finally {
        setLoading(false);
      }
    };

    fetchContent();

    // 이벤트 리스너 설정
    const handleMessage = (event) =&gt; {
      if (event.data.type === &apos;elementInfo&apos;) {
        setElementInfo(event.data.info);
      }
    };
    window.addEventListener(&apos;message&apos;, handleMessage);

    return () =&gt; {
      setContent(null);
      setError(null);
      setIsInspecting(false);
      setElementInfo(null);
      window.removeEventListener(&apos;message&apos;, handleMessage);
    };
  }, [selectedPost, isInspecting]);

  const handleCustomUrl = async (url) =&gt; {
    if (!url) return;
    setLoading(true);
    setError(null);
    try {
      const response = await api.post(&apos;/extract-content&apos;, { url });
      setContent({
        styles: `&lt;style&gt;${style}&lt;/style&gt;`,
        content: `&lt;div class=&quot;content-frame-wrapper&quot;&gt;
          &lt;iframe
            class=&quot;content-frame&quot;
            src=&quot;${response.data.url}&quot;
            sandbox=&quot;allow-same-origin allow-scripts allow-popups allow-forms&quot;
            loading=&quot;lazy&quot;
          &gt;&lt;/iframe&gt;
        &lt;/div&gt;`,
        url: response.data.url
      });
    } catch (err) {
      setError(err.response?.data?.detail || &apos;URL 처리에 실패했습니다.&apos;);
    } finally {
      setLoading(false);
    }
  };

  return (
    &lt;div className=&quot;bg-gray-700 rounded-lg shadow-lg h-full flex flex-col&quot;&gt;
      &lt;ContentToolbar
        url={content?.url}
        title={selectedPost ? selectedPost.title : &apos;게시글 내용&apos;}
        isInspecting={isInspecting}
        onInspectToggle={setIsInspecting}
        onCustomUrlSubmit={handleCustomUrl}
      /&gt;

      &lt;div className=&quot;flex-1 overflow-hidden&quot;&gt;
        &lt;div className={`h-full flex ${isInspecting ? &apos;space-x-4&apos; : &apos;&apos;}`}&gt;
          &lt;div className={`flex-1 bg-white rounded-b-lg ${isInspecting ? &apos;rounded-br-none&apos; : &apos;&apos;}`}&gt;
            {loading ? (
              &lt;div className=&quot;flex justify-center items-center h-full&quot;&gt;
                &lt;div className=&quot;animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500&quot; /&gt;
              &lt;/div&gt;
            ) : error ? (
              &lt;div className=&quot;p-4 text-red-400 bg-red-400/10&quot;&gt;
                &lt;p className=&quot;font-semibold&quot;&gt;오류 발생&lt;/p&gt;
                &lt;p className=&quot;mt-1 text-sm&quot;&gt;{error}&lt;/p&gt;
              &lt;/div&gt;
            ) : content ? (
              &lt;&gt;
                &lt;div dangerouslySetInnerHTML={{ __html: content.styles }} /&gt;
                &lt;div
                  dangerouslySetInnerHTML={{ __html: content.content }}
                  className=&quot;h-full&quot;
                /&gt;
              &lt;/&gt;
            ) : (
              &lt;div className=&quot;flex flex-col items-center justify-center h-full text-gray-600&quot;&gt;
                &lt;span className=&quot;text-2xl mb-2&quot;&gt;👈&lt;/span&gt;
                &lt;p&gt;왼쪽에서 게시글을 선택하세요.&lt;/p&gt;
              &lt;/div&gt;
            )}
          &lt;/div&gt;

          {isInspecting &amp;&amp; (
            &lt;ElementInspector
              elementInfo={elementInfo}
              onClose={() =&gt; setIsInspecting(false)}
            /&gt;
          )}
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  );
};
</document_content>
</document>
<document index="1">
<source>components\content\ElementInspector.js</source>
<document_content>
import React from &apos;react&apos;;
import { XCircle } from &apos;lucide-react&apos;;

const ElementInspector = ({ elementInfo, onClose }) =&gt; {
  if (!elementInfo) {
    return (
      &lt;div className=&quot;p-4 text-gray-400 text-center&quot;&gt;
        요소 위로 마우스를 올려보세요
      &lt;/div&gt;
    );
  }

  return (
    &lt;div className=&quot;w-80 bg-gray-800 rounded-br-lg overflow-y-auto&quot;&gt;
      &lt;div className=&quot;p-4 border-b border-gray-700 flex justify-between items-center&quot;&gt;
        &lt;h4 className=&quot;text-white font-medium&quot;&gt;요소 정보&lt;/h4&gt;
        &lt;button
          onClick={onClose}
          className=&quot;text-gray-400 hover:text-white&quot;
        &gt;
          &lt;XCircle size={20} /&gt;
        &lt;/button&gt;
      &lt;/div&gt;

      &lt;div className=&quot;p-4 text-sm space-y-4&quot;&gt;
        &lt;Section title=&quot;요소&quot;&gt;
          &lt;p className=&quot;text-white&quot;&gt;{elementInfo.tagName}&lt;/p&gt;
          {elementInfo.id &amp;&amp; (
            &lt;p className=&quot;text-gray-300 mt-1&quot;&gt;ID: {elementInfo.id}&lt;/p&gt;
          )}
          {elementInfo.classes.length &gt; 0 &amp;&amp; (
            &lt;p className=&quot;text-gray-300 mt-1 break-words&quot;&gt;
              Classes: {elementInfo.classes.join(&apos; &apos;)}
            &lt;/p&gt;
          )}
        &lt;/Section&gt;

        &lt;Section title=&quot;크기&quot;&gt;
          &lt;p className=&quot;text-gray-300&quot;&gt;너비: {elementInfo.dimensions.width}px&lt;/p&gt;
          &lt;p className=&quot;text-gray-300&quot;&gt;높이: {elementInfo.dimensions.height}px&lt;/p&gt;
        &lt;/Section&gt;

        &lt;Section title=&quot;위치&quot;&gt;
          &lt;p className=&quot;text-gray-300&quot;&gt;상단: {elementInfo.position.top}px&lt;/p&gt;
          &lt;p className=&quot;text-gray-300&quot;&gt;좌측: {elementInfo.position.left}px&lt;/p&gt;
        &lt;/Section&gt;

        &lt;Section title=&quot;스타일&quot;&gt;
          &lt;p className=&quot;text-gray-300&quot;&gt;색상: {elementInfo.styles.color}&lt;/p&gt;
          &lt;p className=&quot;text-gray-300&quot;&gt;배경: {elementInfo.styles.backgroundColor}&lt;/p&gt;
          &lt;p className=&quot;text-gray-300&quot;&gt;글자 크기: {elementInfo.styles.fontSize}&lt;/p&gt;
          &lt;p className=&quot;text-gray-300&quot;&gt;패딩: {elementInfo.styles.padding}&lt;/p&gt;
          &lt;p className=&quot;text-gray-300&quot;&gt;마진: {elementInfo.styles.margin}&lt;/p&gt;
        &lt;/Section&gt;

        {elementInfo.text &amp;&amp; (
          &lt;Section title=&quot;텍스트 내용&quot;&gt;
            &lt;p className=&quot;text-gray-300 break-words&quot;&gt;{elementInfo.text}&lt;/p&gt;
          &lt;/Section&gt;
        )}
      &lt;/div&gt;
    &lt;/div&gt;
  );
};

const Section = ({ title, children }) =&gt; (
  &lt;div&gt;
    &lt;h5 className=&quot;text-blue-400 font-medium mb-2&quot;&gt;{title}&lt;/h5&gt;
    {children}
  &lt;/div&gt;
);

export default ElementInspector;
</document_content>
</document>
<document index="1">
<source>components\layout\Header.js</source>
<document_content>
import React from &apos;react&apos;;
import { UserMenu } from &apos;../UserMenu&apos;;

const Header = () =&gt; {
  return (
    &lt;header className=&quot;bg-gray-800 border-b border-gray-700 flex-shrink-0&quot;&gt;
    {/*// &lt;header className=&quot;hidden&quot;&gt;*/}
      &lt;div className=&quot;max-w-[1800px] mx-auto px-4 flex justify-between items-center&quot;&gt;
        &lt;h1 className=&quot;text-3xl font-bold py-4 text-white&quot;&gt;스토리&lt;/h1&gt;
        &lt;UserMenu /&gt;
      &lt;/div&gt;
    &lt;/header&gt;
  );
};

export default Header;
</document_content>
</document>
<document index="1">
<source>components\layout\MainLayout.js</source>
<document_content>
import React from &apos;react&apos;;
import { Outlet } from &apos;react-router-dom&apos;;
import Header from &apos;./Header&apos;;
import SideNav from &apos;./SideNav&apos;;

const MainLayout = () =&gt; {
  return (
    &lt;div className=&quot;flex min-h-screen bg-gray-800&quot;&gt;
      &lt;SideNav /&gt;
      &lt;div className=&quot;flex-1 flex flex-col min-h-screen overflow-hidden&quot;&gt;
        &lt;Header /&gt;
        &lt;main className=&quot;flex-1 overflow-auto p-4&quot;&gt;
          &lt;Outlet /&gt;
        &lt;/main&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  );
};

export default MainLayout;
</document_content>
</document>
<document index="1">
<source>components\layout\SideNav.js</source>
<document_content>
import React from &apos;react&apos;;
import { NavLink } from &apos;react-router-dom&apos;;
import { useRecoilValue } from &apos;recoil&apos;;
import { LayoutGrid, Image, Settings, MessageSquare } from &apos;lucide-react&apos;;
import { userState } from &apos;../../recoil/atoms&apos;;
import { ChatHistory } from &apos;../ChatHistory&apos;;

const NavItem = ({ icon, text, to }) =&gt; (
  &lt;NavLink
    to={to}
    className={({ isActive }) =&gt; `
      flex items-center px-4 py-3 text-gray-400 hover:text-white
      transition-colors duration-200
      ${isActive ? &apos;bg-gray-800 text-white&apos; : &apos;&apos;}
    `}
  &gt;
    &lt;span className=&quot;flex-shrink-0&quot;&gt;{icon}&lt;/span&gt;
    &lt;span className=&quot;ml-4 whitespace-nowrap overflow-hidden opacity-100 transition-opacity duration-300&quot;&gt;
      {text}
    &lt;/span&gt;
  &lt;/NavLink&gt;
);

const SideNav = () =&gt; {
  const user = useRecoilValue(userState);

  const menuItems = [
    { icon: &lt;LayoutGrid size={20} /&gt;, text: &quot;게시판&quot;, path: &quot;/&quot; },
    { icon: &lt;Image size={20} /&gt;, text: &quot;짤 검색&quot;, path: &quot;/memes&quot; },
    { icon: &lt;Settings size={20} /&gt;, text: &quot;AI 설정&quot;, path: &quot;/settings&quot; },
  ];

  return (
    &lt;nav className=&quot;w-16 hover:w-64 transition-all duration-300 bg-gray-900 h-screen flex-shrink-0 flex flex-col&quot;&gt;
      &lt;div className=&quot;flex flex-col flex-grow&quot;&gt;
        &lt;ul className=&quot;py-4 space-y-2&quot;&gt;
          {menuItems.map((item) =&gt; (
            &lt;li key={item.path}&gt;
              &lt;NavItem
                icon={item.icon}
                text={item.text}
                to={item.path}
              /&gt;
            &lt;/li&gt;
          ))}
        &lt;/ul&gt;

        {/*{user &amp;&amp; &lt;ChatHistory /&gt;}*/}
      &lt;/div&gt;
    &lt;/nav&gt;
  );
};

export default SideNav;
</document_content>
</document>
<document index="1">
<source>components\posts\CategorySelect.js</source>
<document_content>
import React from &apos;react&apos;;

const CategorySelect = ({ value, options, onChange }) =&gt; {
  return (
    &lt;select
      value={value}
      onChange={(e) =&gt; onChange(e.target.value)}
      className=&quot;px-3 py-2 bg-gray-600 border border-gray-500 rounded text-white text-sm min-w-[120px]&quot;
    &gt;
      {options.map((category) =&gt; (
        &lt;option key={category} value={category}&gt;
          {category}
        &lt;/option&gt;
      ))}
    &lt;/select&gt;
  );
};

export default CategorySelect;
</document_content>
</document>
<document index="1">
<source>components\posts\PostItem.js</source>
<document_content>
import React from &apos;react&apos;;

const PostItem = ({ post, onClick }) =&gt; {
  return (
    &lt;button
      onClick={() =&gt; onClick(post)}
      className=&quot;w-full p-3 bg-gray-600 rounded-lg hover:bg-gray-500
                transition-colors duration-200 text-left&quot;
    &gt;
      &lt;div className=&quot;text-sm font-medium text-white break-words&quot;&gt;
        {post.title}
      &lt;/div&gt;
      &lt;div className=&quot;flex items-center mt-2 space-x-2 text-xs text-gray-300&quot;&gt;
        &lt;span className=&quot;bg-gray-700 px-2 py-0.5 rounded-full&quot;&gt;
          {post.community}
        &lt;/span&gt;
        &lt;span&gt;조회 {post.views}&lt;/span&gt;
        &lt;span&gt;{post.date}&lt;/span&gt;
      &lt;/div&gt;
    &lt;/button&gt;
  );
};

export default PostItem;
</document_content>
</document>
<document index="1">
<source>components\posts\PostList.js</source>
<document_content>
import React, { useState, useEffect } from &apos;react&apos;;
import { useRecoilState } from &apos;recoil&apos;;
import { api } from &apos;../../api/client&apos;;
import {
  postsState,
  selectedPostState,
  currentCategoryState,
  searchQueryState,
  postsPageState
} from &apos;../../recoil/atoms&apos;;
import PostItem from &apos;./PostItem&apos;;
import SearchBar from &apos;./SearchBar&apos;;
import CategorySelect from &apos;./CategorySelect&apos;;
import { Pagination } from &apos;../common/Pagination&apos;;

const PostList = () =&gt; {
  const [posts, setPosts] = useRecoilState(postsState);
  const [currentCategory, setCurrentCategory] = useRecoilState(currentCategoryState);
  const [searchQuery, setSearchQuery] = useRecoilState(searchQueryState);
  const [page, setPage] = useRecoilState(postsPageState);
  const [, setSelectedPost] = useRecoilState(selectedPostState);

  const [loading, setLoading] = useState(false);
  const [categories, setCategories] = useState([]);
  const [totalPages, setTotalPages] = useState(1);
  const [activeSearch, setActiveSearch] = useState(&apos;&apos;);

  useEffect(() =&gt; {
    fetchCategories();
  }, []);

  useEffect(() =&gt; {
    if (currentCategory) {
      fetchPosts();
    }
  }, [currentCategory, page, activeSearch]);

  const fetchCategories = async () =&gt; {
    try {
      const response = await api.get(&apos;/categories&apos;);
      setCategories(response.data);
      if (response.data.length &gt; 0 &amp;&amp; !currentCategory) {
        setCurrentCategory(response.data[0]);
      }
    } catch (err) {
      console.error(&apos;Failed to fetch categories:&apos;, err);
    }
  };

  const fetchPosts = async () =&gt; {
    setLoading(true);
    try {
      const params = {
        category: currentCategory,
        page,
        search: activeSearch
      };

      const response = await api.get(&apos;/posts&apos;, { params });
      setPosts(response.data.items);
      setTotalPages(response.data.total_pages);
    } catch (err) {
      console.error(&apos;Failed to fetch posts:&apos;, err);
    } finally {
      setLoading(false);
    }
  };

  const handleCategoryChange = (category) =&gt; {
    setCurrentCategory(category);
    setPage(0);
    setSearchQuery(&apos;&apos;);
    setActiveSearch(&apos;&apos;);
  };

  const handleSearch = () =&gt; {
    setActiveSearch(searchQuery);
    setPage(0);
  };

  return (
    &lt;div className=&quot;bg-gray-700 rounded-lg shadow-lg h-full flex flex-col&quot;&gt;
      &lt;div className=&quot;p-4 flex flex-col h-full&quot;&gt;
        &lt;div className=&quot;space-y-4&quot;&gt;
          &lt;div className=&quot;flex justify-between items-center&quot;&gt;
            &lt;h3 className=&quot;text-lg font-semibold text-white&quot;&gt;게시글 목록&lt;/h3&gt;
            &lt;CategorySelect
              value={currentCategory}
              options={categories}
              onChange={handleCategoryChange}
            /&gt;
          &lt;/div&gt;

          &lt;SearchBar
            value={searchQuery}
            onChange={setSearchQuery}
            onSearch={handleSearch}
          /&gt;
        &lt;/div&gt;

        &lt;div className=&quot;flex-1 overflow-y-auto mt-4&quot;&gt;
          {loading ? (
            &lt;div className=&quot;flex justify-center py-8&quot;&gt;
              &lt;div className=&quot;animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500&quot; /&gt;
            &lt;/div&gt;
          ) : (
            &lt;div className=&quot;space-y-2&quot;&gt;
              {posts.length &gt; 0 ? (
                posts.map((post) =&gt; (
                  &lt;PostItem
                    key={post.id}
                    post={post}
                    onClick={setSelectedPost}
                  /&gt;
                ))
              ) : (
                &lt;div className=&quot;text-center text-gray-400 py-8&quot;&gt;
                  {activeSearch ? &apos;검색 결과가 없습니다.&apos; : &apos;게시글이 없습니다.&apos;}
                &lt;/div&gt;
              )}
            &lt;/div&gt;
          )}
        &lt;/div&gt;

        {!loading &amp;&amp; posts.length &gt; 0 &amp;&amp; (
          &lt;div className=&quot;mt-4&quot;&gt;
            &lt;Pagination
              currentPage={page}
              totalPages={totalPages}
              onPageChange={setPage}
            /&gt;
          &lt;/div&gt;
        )}
      &lt;/div&gt;
    &lt;/div&gt;
  );
};

export default PostList;
</document_content>
</document>
<document index="1">
<source>components\posts\SearchBar.js</source>
<document_content>
import React from &apos;react&apos;;
import { Search } from &apos;lucide-react&apos;;

const SearchBar = ({ value, onChange, onSearch }) =&gt; {
  const handleSubmit = (e) =&gt; {
    e.preventDefault();
    onSearch();
  };

  return (
    &lt;form onSubmit={handleSubmit}&gt;
      &lt;div className=&quot;relative&quot;&gt;
        &lt;input
          type=&quot;text&quot;
          value={value}
          onChange={(e) =&gt; onChange(e.target.value)}
          placeholder=&quot;게시글 검색...&quot;
          className=&quot;w-full px-4 py-2 bg-gray-600 border border-gray-500 rounded-lg text-white pr-10&quot;
        /&gt;
        &lt;button
          type=&quot;submit&quot;
          className=&quot;absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white&quot;
        &gt;
          &lt;Search size={20} /&gt;
        &lt;/button&gt;
      &lt;/div&gt;
    &lt;/form&gt;
  );
};

export default SearchBar;
</document_content>
</document>
<document index="1">
<source>hooks\useAuthForm.js</source>
<document_content>
import { useState } from &apos;react&apos;;
import { authApi } from &apos;../api/auth&apos;;
import { useRecoilState } from &apos;recoil&apos;;
import { userState } from &apos;../recoil/atoms&apos;;

export const useAuthForm = (type = &apos;login&apos;) =&gt; {
  const [, setUser] = useRecoilState(userState);
  const [formData, setFormData] = useState({
    email: &apos;&apos;,
    password: &apos;&apos;,
    username: &apos;&apos;,
  });
  const [error, setError] = useState(&apos;&apos;);
  const [loading, setLoading] = useState(false);

  const handleInputChange = (e) =&gt; {
    const { name, value } = e.target;
    setFormData(prev =&gt; ({
      ...prev,
      [name]: value
    }));
  };

  const resetForm = () =&gt; {
    setFormData({
      email: &apos;&apos;,
      password: &apos;&apos;,
      username: &apos;&apos;,
    });
    setError(&apos;&apos;);
  };

  const handleSubmit = async (e) =&gt; {
    e.preventDefault();
    setError(&apos;&apos;);
    setLoading(true);

    try {
      const { email, password, username } = formData;

      if (type === &apos;register&apos;) {
        await authApi.register({ email, password, username });
      }

      const loginData = await authApi.login(email, password);
      setUser(loginData.user);
      resetForm();
      return true;
    } catch (err) {
      let errorMessage = &apos;&apos;;
      if (err.response?.data?.detail) {
        errorMessage = typeof err.response.data.detail === &apos;object&apos;
          ? &apos;입력 정보를 확인해주세요.&apos;
          : err.response.data.detail;
      } else {
        errorMessage = &apos;처리 중 오류가 발생했습니다.&apos;;
      }
      setError(errorMessage);
      return false;
    } finally {
      setLoading(false);
    }
  };

  return {
    formData,
    error,
    loading,
    handleInputChange,
    handleSubmit,
    resetForm
  };
};
</document_content>
</document>
<document index="1">
<source>recoil\atoms.js</source>
<document_content>
import { atom } from &apos;recoil&apos;;

// 사용자 관련 상태
export const userState = atom({
  key: &apos;userState&apos;,
  default: null
});

export const loginModalState = atom({
  key: &apos;loginModalState&apos;,
  default: false
});

// 게시글 관련 상태
export const postsState = atom({
  key: &apos;postsState&apos;,
  default: []
});

export const selectedPostState = atom({
  key: &apos;selectedPostState&apos;,
  default: null
});

export const currentCategoryState = atom({
  key: &apos;currentCategoryState&apos;,
  default: &apos;&apos;
});

export const searchQueryState = atom({
  key: &apos;searchQueryState&apos;,
  default: &apos;&apos;
});

export const postsPageState = atom({
  key: &apos;postsPageState&apos;,
  default: 0
});

// 스토리 생성 관련 상태
export const storyGeneratorState = atom({
  key: &apos;storyGeneratorState&apos;,
  default: {
    text: &apos;&apos;,
    result: &apos;&apos;,
    tone: &apos;기본&apos;,
    modificationInput: &apos;&apos;
  }
});

export const chatHistoryState = atom({
  key: &apos;chatHistoryState&apos;,
  default: []
});

// OCR 관련 상태
export const ocrImageUrlState = atom({
  key: &apos;ocrImageUrlState&apos;,
  default: &apos;&apos;
});

export const chatListState = atom({
  key: &apos;chatListState&apos;,
  default: [] // { id: string, title: string, messages: Array&lt;{role: string, content: string}&gt; }
});

export const currentChatState = atom({
  key: &apos;currentChatState&apos;,
  default: null // 현재 선택된 채팅의 ID
});

// 사이드바 상태 관리
export const sidebarState = atom({
  key: &apos;sidebarState&apos;,
  default: {
    chatHistory: []  // 사용자의 이전 대화 기록
  }
});
</document_content>
</document>
</documents>
